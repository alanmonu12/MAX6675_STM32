
Termometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001e90  08001e90  00011e90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ecc  08001ecc  00011ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ed0  08001ed0  00011ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08001ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  20000070  08001f44  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001c0  08001f44  000201c0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000182fa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fb6  00000000  00000000  0003839a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000079c8  00000000  00000000  0003b350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009e8  00000000  00000000  00042d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d50  00000000  00000000  00043700  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006ce9  00000000  00000000  00044450  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003691  00000000  00000000  0004b139  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e7ca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e60  00000000  00000000  0004e848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e78 	.word	0x08001e78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08001e78 	.word	0x08001e78

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f894 	bl	800030c <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f856 	bl	80002a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f82f 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fca2 	bl	8001b70 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000098 	.word	0x20000098
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000098 	.word	0x20000098

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800030c:	3801      	subs	r0, #1
 800030e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000312:	d20a      	bcs.n	800032a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	21f0      	movs	r1, #240	; 0xf0
 800031c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000320:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000322:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800032a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e010 	.word	0xe000e010
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800033c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000340:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004a8 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000344:	4a56      	ldr	r2, [pc, #344]	; (80004a0 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000346:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000348:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 800034c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034e:	9c01      	ldr	r4, [sp, #4]
 8000350:	40dc      	lsrs	r4, r3
 8000352:	d102      	bne.n	800035a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000354:	b005      	add	sp, #20
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035a:	2401      	movs	r4, #1
 800035c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000360:	9c01      	ldr	r4, [sp, #4]
 8000362:	ea14 050a 	ands.w	r5, r4, sl
 8000366:	f000 8093 	beq.w	8000490 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800036a:	684c      	ldr	r4, [r1, #4]
 800036c:	f024 0b10 	bic.w	fp, r4, #16
 8000370:	f1bb 0f02 	cmp.w	fp, #2
 8000374:	d111      	bne.n	800039a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000376:	08df      	lsrs	r7, r3, #3
 8000378:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800037c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000380:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000382:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000386:	fa09 fc0e 	lsl.w	ip, r9, lr
 800038a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800038e:	690e      	ldr	r6, [r1, #16]
 8000390:	fa06 f60e 	lsl.w	r6, r6, lr
 8000394:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000398:	623e      	str	r6, [r7, #32]
 800039a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800039e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003a0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a2:	fa07 f70c 	lsl.w	r7, r7, ip
 80003a6:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ac:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ae:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b2:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ba:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003be:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c0:	d811      	bhi.n	80003e6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003c2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003c8:	68ce      	ldr	r6, [r1, #12]
 80003ca:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003ce:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003d2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003d6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003da:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003de:	409e      	lsls	r6, r3
 80003e0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003e4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003e6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003ea:	688e      	ldr	r6, [r1, #8]
 80003ec:	fa06 f60c 	lsl.w	r6, r6, ip
 80003f0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003f4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f6:	d54b      	bpl.n	8000490 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003fc:	f046 0601 	orr.w	r6, r6, #1
 8000400:	f8c8 6018 	str.w	r6, [r8, #24]
 8000404:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000408:	f023 0703 	bic.w	r7, r3, #3
 800040c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000410:	f006 0601 	and.w	r6, r6, #1
 8000414:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000418:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800041a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000420:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000422:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000426:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800042a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800042e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000432:	d02f      	beq.n	8000494 <HAL_GPIO_Init+0x15c>
 8000434:	4e1b      	ldr	r6, [pc, #108]	; (80004a4 <HAL_GPIO_Init+0x16c>)
 8000436:	42b0      	cmp	r0, r6
 8000438:	d02e      	beq.n	8000498 <HAL_GPIO_Init+0x160>
 800043a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800043e:	42b0      	cmp	r0, r6
 8000440:	d02c      	beq.n	800049c <HAL_GPIO_Init+0x164>
 8000442:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000446:	42b0      	cmp	r0, r6
 8000448:	bf14      	ite	ne
 800044a:	2605      	movne	r6, #5
 800044c:	2603      	moveq	r6, #3
 800044e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000452:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000456:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000458:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800045a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000460:	bf0c      	ite	eq
 8000462:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000464:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000466:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000468:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800046a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800046e:	bf0c      	ite	eq
 8000470:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000472:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000474:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000476:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000478:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800047c:	bf0c      	ite	eq
 800047e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000480:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000482:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000484:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000486:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000488:	bf54      	ite	pl
 800048a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800048c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800048e:	60d6      	str	r6, [r2, #12]
    position++;
 8000490:	3301      	adds	r3, #1
 8000492:	e75c      	b.n	800034e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000494:	2600      	movs	r6, #0
 8000496:	e7da      	b.n	800044e <HAL_GPIO_Init+0x116>
 8000498:	2601      	movs	r6, #1
 800049a:	e7d8      	b.n	800044e <HAL_GPIO_Init+0x116>
 800049c:	2602      	movs	r6, #2
 800049e:	e7d6      	b.n	800044e <HAL_GPIO_Init+0x116>
 80004a0:	40010400 	.word	0x40010400
 80004a4:	48000400 	.word	0x48000400
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004ac:	b10a      	cbz	r2, 80004b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ae:	6181      	str	r1, [r0, #24]
 80004b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b2:	6281      	str	r1, [r0, #40]	; 0x28
 80004b4:	4770      	bx	lr

080004b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80004b6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80004b8:	4604      	mov	r4, r0
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d04a      	beq.n	8000554 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80004be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80004c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004c6:	b91b      	cbnz	r3, 80004d0 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80004cc:	f001 fa34 	bl	8001938 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004d0:	2324      	movs	r3, #36	; 0x24
 80004d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004d6:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004d8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	f022 0201 	bic.w	r2, r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80004e2:	6862      	ldr	r2, [r4, #4]
 80004e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80004e8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004ea:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004ec:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004f6:	d124      	bne.n	8000542 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80004f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80004fc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80004fe:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000500:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000502:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800050a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800050c:	68da      	ldr	r2, [r3, #12]
 800050e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000512:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000514:	6922      	ldr	r2, [r4, #16]
 8000516:	430a      	orrs	r2, r1
 8000518:	69a1      	ldr	r1, [r4, #24]
 800051a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800051e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000520:	6a21      	ldr	r1, [r4, #32]
 8000522:	69e2      	ldr	r2, [r4, #28]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f042 0201 	orr.w	r2, r2, #1
 800052e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000530:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000532:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000534:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800053a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800053c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000540:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000542:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000546:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000548:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800054a:	bf04      	itt	eq
 800054c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000550:	605a      	streq	r2, [r3, #4]
 8000552:	e7d4      	b.n	80004fe <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
}
 8000556:	bd10      	pop	{r4, pc}

08000558 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000558:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	2a20      	cmp	r2, #32
{
 8000560:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000562:	d11d      	bne.n	80005a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000564:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000568:	2b01      	cmp	r3, #1
 800056a:	d019      	beq.n	80005a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800056c:	2324      	movs	r3, #36	; 0x24
 800056e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000572:	6803      	ldr	r3, [r0, #0]
 8000574:	681c      	ldr	r4, [r3, #0]
 8000576:	f024 0401 	bic.w	r4, r4, #1
 800057a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800057c:	681c      	ldr	r4, [r3, #0]
 800057e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000582:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000584:	681c      	ldr	r4, [r3, #0]
 8000586:	4321      	orrs	r1, r4
 8000588:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	f041 0101 	orr.w	r1, r1, #1
 8000590:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000592:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000594:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000598:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800059c:	4618      	mov	r0, r3
 800059e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80005a0:	2002      	movs	r0, #2
  }
}
 80005a2:	bd10      	pop	{r4, pc}

080005a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80005a4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80005a6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80005aa:	b2e4      	uxtb	r4, r4
 80005ac:	2c20      	cmp	r4, #32
 80005ae:	d11c      	bne.n	80005ea <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80005b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d018      	beq.n	80005ea <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80005b8:	2324      	movs	r3, #36	; 0x24
 80005ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80005be:	6803      	ldr	r3, [r0, #0]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	f022 0201 	bic.w	r2, r2, #1
 80005c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80005c8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80005ca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80005ce:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80005d2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f042 0201 	orr.w	r2, r2, #1
 80005da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80005dc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005de:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80005e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80005ea:	2002      	movs	r0, #2
  }
}
 80005ec:	bd10      	pop	{r4, pc}
	...

080005f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80005f4:	4605      	mov	r5, r0
 80005f6:	b918      	cbnz	r0, 8000600 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80005fa:	b002      	add	sp, #8
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	07da      	lsls	r2, r3, #31
 8000604:	d411      	bmi.n	800062a <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000606:	682b      	ldr	r3, [r5, #0]
 8000608:	079b      	lsls	r3, r3, #30
 800060a:	f100 8085 	bmi.w	8000718 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800060e:	682b      	ldr	r3, [r5, #0]
 8000610:	071c      	lsls	r4, r3, #28
 8000612:	f100 80f6 	bmi.w	8000802 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000616:	682b      	ldr	r3, [r5, #0]
 8000618:	0758      	lsls	r0, r3, #29
 800061a:	f100 813f 	bmi.w	800089c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800061e:	69ea      	ldr	r2, [r5, #28]
 8000620:	2a00      	cmp	r2, #0
 8000622:	f040 81d6 	bne.w	80009d2 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000626:	2000      	movs	r0, #0
 8000628:	e7e7      	b.n	80005fa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800062a:	4cba      	ldr	r4, [pc, #744]	; (8000914 <HAL_RCC_OscConfig+0x324>)
 800062c:	6863      	ldr	r3, [r4, #4]
 800062e:	f003 030c 	and.w	r3, r3, #12
 8000632:	2b04      	cmp	r3, #4
 8000634:	d007      	beq.n	8000646 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000636:	6863      	ldr	r3, [r4, #4]
 8000638:	f003 030c 	and.w	r3, r3, #12
 800063c:	2b08      	cmp	r3, #8
 800063e:	d116      	bne.n	800066e <HAL_RCC_OscConfig+0x7e>
 8000640:	6863      	ldr	r3, [r4, #4]
 8000642:	03df      	lsls	r7, r3, #15
 8000644:	d513      	bpl.n	800066e <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800064a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800064e:	6821      	ldr	r1, [r4, #0]
 8000650:	fa93 f3a3 	rbit	r3, r3
 8000654:	fab3 f383 	clz	r3, r3
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	2201      	movs	r2, #1
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	420b      	tst	r3, r1
 8000664:	d0cf      	beq.n	8000606 <HAL_RCC_OscConfig+0x16>
 8000666:	686b      	ldr	r3, [r5, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1cc      	bne.n	8000606 <HAL_RCC_OscConfig+0x16>
 800066c:	e7c4      	b.n	80005f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066e:	686a      	ldr	r2, [r5, #4]
 8000670:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000674:	d125      	bne.n	80006c2 <HAL_RCC_OscConfig+0xd2>
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067c:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800067e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000680:	68a9      	ldr	r1, [r5, #8]
 8000682:	f023 030f 	bic.w	r3, r3, #15
 8000686:	430b      	orrs	r3, r1
 8000688:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800068a:	b352      	cbz	r2, 80006e2 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800068c:	f7ff fdde 	bl	800024c <HAL_GetTick>
 8000690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000694:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000696:	2701      	movs	r7, #1
 8000698:	fa96 f3a6 	rbit	r3, r6
 800069c:	6822      	ldr	r2, [r4, #0]
 800069e:	fa96 f3a6 	rbit	r3, r6
 80006a2:	fab3 f383 	clz	r3, r3
 80006a6:	f003 031f 	and.w	r3, r3, #31
 80006aa:	fa07 f303 	lsl.w	r3, r7, r3
 80006ae:	4213      	tst	r3, r2
 80006b0:	d1a9      	bne.n	8000606 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b2:	f7ff fdcb 	bl	800024c <HAL_GetTick>
 80006b6:	eba0 0008 	sub.w	r0, r0, r8
 80006ba:	2864      	cmp	r0, #100	; 0x64
 80006bc:	d9ec      	bls.n	8000698 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 80006be:	2003      	movs	r0, #3
 80006c0:	e79b      	b.n	80005fa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	b932      	cbnz	r2, 80006d4 <HAL_RCC_OscConfig+0xe4>
 80006c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ca:	6023      	str	r3, [r4, #0]
 80006cc:	6823      	ldr	r3, [r4, #0]
 80006ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d2:	e7d3      	b.n	800067c <HAL_RCC_OscConfig+0x8c>
 80006d4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80006d8:	d1f5      	bne.n	80006c6 <HAL_RCC_OscConfig+0xd6>
 80006da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006de:	6023      	str	r3, [r4, #0]
 80006e0:	e7c9      	b.n	8000676 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80006e2:	f7ff fdb3 	bl	800024c <HAL_GetTick>
 80006e6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006ea:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006ec:	2701      	movs	r7, #1
 80006ee:	fa96 f3a6 	rbit	r3, r6
 80006f2:	6822      	ldr	r2, [r4, #0]
 80006f4:	fa96 f3a6 	rbit	r3, r6
 80006f8:	fab3 f383 	clz	r3, r3
 80006fc:	f003 031f 	and.w	r3, r3, #31
 8000700:	fa07 f303 	lsl.w	r3, r7, r3
 8000704:	4213      	tst	r3, r2
 8000706:	f43f af7e 	beq.w	8000606 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800070a:	f7ff fd9f 	bl	800024c <HAL_GetTick>
 800070e:	eba0 0008 	sub.w	r0, r0, r8
 8000712:	2864      	cmp	r0, #100	; 0x64
 8000714:	d9eb      	bls.n	80006ee <HAL_RCC_OscConfig+0xfe>
 8000716:	e7d2      	b.n	80006be <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000718:	4c7e      	ldr	r4, [pc, #504]	; (8000914 <HAL_RCC_OscConfig+0x324>)
 800071a:	6863      	ldr	r3, [r4, #4]
 800071c:	f013 0f0c 	tst.w	r3, #12
 8000720:	d007      	beq.n	8000732 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000722:	6863      	ldr	r3, [r4, #4]
 8000724:	f003 030c 	and.w	r3, r3, #12
 8000728:	2b08      	cmp	r3, #8
 800072a:	d122      	bne.n	8000772 <HAL_RCC_OscConfig+0x182>
 800072c:	6863      	ldr	r3, [r4, #4]
 800072e:	03de      	lsls	r6, r3, #15
 8000730:	d41f      	bmi.n	8000772 <HAL_RCC_OscConfig+0x182>
 8000732:	2302      	movs	r3, #2
 8000734:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000738:	6821      	ldr	r1, [r4, #0]
 800073a:	fa93 f3a3 	rbit	r3, r3
 800073e:	fab3 f383 	clz	r3, r3
 8000742:	f003 031f 	and.w	r3, r3, #31
 8000746:	2201      	movs	r2, #1
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	420b      	tst	r3, r1
 800074e:	d003      	beq.n	8000758 <HAL_RCC_OscConfig+0x168>
 8000750:	692b      	ldr	r3, [r5, #16]
 8000752:	4293      	cmp	r3, r2
 8000754:	f47f af50 	bne.w	80005f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000758:	6821      	ldr	r1, [r4, #0]
 800075a:	23f8      	movs	r3, #248	; 0xf8
 800075c:	fa93 f3a3 	rbit	r3, r3
 8000760:	fab3 f283 	clz	r2, r3
 8000764:	696b      	ldr	r3, [r5, #20]
 8000766:	4093      	lsls	r3, r2
 8000768:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800076c:	4313      	orrs	r3, r2
 800076e:	6023      	str	r3, [r4, #0]
 8000770:	e74d      	b.n	800060e <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000772:	692a      	ldr	r2, [r5, #16]
 8000774:	2601      	movs	r6, #1
 8000776:	b30a      	cbz	r2, 80007bc <HAL_RCC_OscConfig+0x1cc>
 8000778:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800077c:	fab3 f383 	clz	r3, r3
 8000780:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000784:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	2702      	movs	r7, #2
 800078c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800078e:	f7ff fd5d 	bl	800024c <HAL_GetTick>
 8000792:	4680      	mov	r8, r0
 8000794:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000798:	6822      	ldr	r2, [r4, #0]
 800079a:	fa97 f3a7 	rbit	r3, r7
 800079e:	fab3 f383 	clz	r3, r3
 80007a2:	f003 031f 	and.w	r3, r3, #31
 80007a6:	fa06 f303 	lsl.w	r3, r6, r3
 80007aa:	4213      	tst	r3, r2
 80007ac:	d1d4      	bne.n	8000758 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007ae:	f7ff fd4d 	bl	800024c <HAL_GetTick>
 80007b2:	eba0 0008 	sub.w	r0, r0, r8
 80007b6:	2802      	cmp	r0, #2
 80007b8:	d9ec      	bls.n	8000794 <HAL_RCC_OscConfig+0x1a4>
 80007ba:	e780      	b.n	80006be <HAL_RCC_OscConfig+0xce>
 80007bc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80007c0:	fab3 f383 	clz	r3, r3
 80007c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	2702      	movs	r7, #2
 80007d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007d2:	f7ff fd3b 	bl	800024c <HAL_GetTick>
 80007d6:	4680      	mov	r8, r0
 80007d8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007dc:	6822      	ldr	r2, [r4, #0]
 80007de:	fa97 f3a7 	rbit	r3, r7
 80007e2:	fab3 f383 	clz	r3, r3
 80007e6:	f003 031f 	and.w	r3, r3, #31
 80007ea:	fa06 f303 	lsl.w	r3, r6, r3
 80007ee:	4213      	tst	r3, r2
 80007f0:	f43f af0d 	beq.w	800060e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007f4:	f7ff fd2a 	bl	800024c <HAL_GetTick>
 80007f8:	eba0 0008 	sub.w	r0, r0, r8
 80007fc:	2802      	cmp	r0, #2
 80007fe:	d9eb      	bls.n	80007d8 <HAL_RCC_OscConfig+0x1e8>
 8000800:	e75d      	b.n	80006be <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000802:	69aa      	ldr	r2, [r5, #24]
 8000804:	4e43      	ldr	r6, [pc, #268]	; (8000914 <HAL_RCC_OscConfig+0x324>)
 8000806:	4944      	ldr	r1, [pc, #272]	; (8000918 <HAL_RCC_OscConfig+0x328>)
 8000808:	2401      	movs	r4, #1
 800080a:	b31a      	cbz	r2, 8000854 <HAL_RCC_OscConfig+0x264>
 800080c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000810:	fab3 f383 	clz	r3, r3
 8000814:	440b      	add	r3, r1
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	2702      	movs	r7, #2
 800081a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800081c:	f7ff fd16 	bl	800024c <HAL_GetTick>
 8000820:	4680      	mov	r8, r0
 8000822:	fa97 f3a7 	rbit	r3, r7
 8000826:	fa97 f3a7 	rbit	r3, r7
 800082a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800082e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000830:	fa97 f3a7 	rbit	r3, r7
 8000834:	fab3 f383 	clz	r3, r3
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	fa04 f303 	lsl.w	r3, r4, r3
 8000840:	4213      	tst	r3, r2
 8000842:	f47f aee8 	bne.w	8000616 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000846:	f7ff fd01 	bl	800024c <HAL_GetTick>
 800084a:	eba0 0008 	sub.w	r0, r0, r8
 800084e:	2802      	cmp	r0, #2
 8000850:	d9e7      	bls.n	8000822 <HAL_RCC_OscConfig+0x232>
 8000852:	e734      	b.n	80006be <HAL_RCC_OscConfig+0xce>
 8000854:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000858:	fab3 f383 	clz	r3, r3
 800085c:	440b      	add	r3, r1
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	2702      	movs	r7, #2
 8000862:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000864:	f7ff fcf2 	bl	800024c <HAL_GetTick>
 8000868:	4680      	mov	r8, r0
 800086a:	fa97 f3a7 	rbit	r3, r7
 800086e:	fa97 f3a7 	rbit	r3, r7
 8000872:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000876:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000878:	fa97 f3a7 	rbit	r3, r7
 800087c:	fab3 f383 	clz	r3, r3
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	fa04 f303 	lsl.w	r3, r4, r3
 8000888:	4213      	tst	r3, r2
 800088a:	f43f aec4 	beq.w	8000616 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800088e:	f7ff fcdd 	bl	800024c <HAL_GetTick>
 8000892:	eba0 0008 	sub.w	r0, r0, r8
 8000896:	2802      	cmp	r0, #2
 8000898:	d9e7      	bls.n	800086a <HAL_RCC_OscConfig+0x27a>
 800089a:	e710      	b.n	80006be <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800089c:	4c1d      	ldr	r4, [pc, #116]	; (8000914 <HAL_RCC_OscConfig+0x324>)
 800089e:	69e3      	ldr	r3, [r4, #28]
 80008a0:	00d9      	lsls	r1, r3, #3
 80008a2:	d434      	bmi.n	800090e <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	69e3      	ldr	r3, [r4, #28]
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	61e3      	str	r3, [r4, #28]
 80008ac:	69e3      	ldr	r3, [r4, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008b6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008b8:	4f18      	ldr	r7, [pc, #96]	; (800091c <HAL_RCC_OscConfig+0x32c>)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	05da      	lsls	r2, r3, #23
 80008be:	d52f      	bpl.n	8000920 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c0:	68eb      	ldr	r3, [r5, #12]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d13d      	bne.n	8000942 <HAL_RCC_OscConfig+0x352>
 80008c6:	6a23      	ldr	r3, [r4, #32]
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008ce:	f7ff fcbd 	bl	800024c <HAL_GetTick>
 80008d2:	2702      	movs	r7, #2
 80008d4:	4682      	mov	sl, r0
 80008d6:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008d8:	f04f 0801 	mov.w	r8, #1
 80008dc:	fa97 f3a7 	rbit	r3, r7
 80008e0:	fa97 f3a7 	rbit	r3, r7
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d06c      	beq.n	80009c2 <HAL_RCC_OscConfig+0x3d2>
 80008e8:	6a22      	ldr	r2, [r4, #32]
 80008ea:	fa99 f3a9 	rbit	r3, r9
 80008ee:	fab3 f383 	clz	r3, r3
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	fa08 f303 	lsl.w	r3, r8, r3
 80008fa:	4213      	tst	r3, r2
 80008fc:	d058      	beq.n	80009b0 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80008fe:	2e00      	cmp	r6, #0
 8000900:	f43f ae8d 	beq.w	800061e <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000904:	69e3      	ldr	r3, [r4, #28]
 8000906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800090a:	61e3      	str	r3, [r4, #28]
 800090c:	e687      	b.n	800061e <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 800090e:	2600      	movs	r6, #0
 8000910:	e7d2      	b.n	80008b8 <HAL_RCC_OscConfig+0x2c8>
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	10908120 	.word	0x10908120
 800091c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000928:	f7ff fc90 	bl	800024c <HAL_GetTick>
 800092c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	d4c5      	bmi.n	80008c0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000934:	f7ff fc8a 	bl	800024c <HAL_GetTick>
 8000938:	eba0 0008 	sub.w	r0, r0, r8
 800093c:	2864      	cmp	r0, #100	; 0x64
 800093e:	d9f6      	bls.n	800092e <HAL_RCC_OscConfig+0x33e>
 8000940:	e6bd      	b.n	80006be <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000942:	bb3b      	cbnz	r3, 8000994 <HAL_RCC_OscConfig+0x3a4>
 8000944:	6a23      	ldr	r3, [r4, #32]
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6223      	str	r3, [r4, #32]
 800094c:	6a23      	ldr	r3, [r4, #32]
 800094e:	f023 0304 	bic.w	r3, r3, #4
 8000952:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000954:	f7ff fc7a 	bl	800024c <HAL_GetTick>
 8000958:	2702      	movs	r7, #2
 800095a:	4682      	mov	sl, r0
 800095c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800095e:	f04f 0801 	mov.w	r8, #1
 8000962:	fa97 f3a7 	rbit	r3, r7
 8000966:	fa97 f3a7 	rbit	r3, r7
 800096a:	b373      	cbz	r3, 80009ca <HAL_RCC_OscConfig+0x3da>
 800096c:	6a22      	ldr	r2, [r4, #32]
 800096e:	fa99 f3a9 	rbit	r3, r9
 8000972:	fab3 f383 	clz	r3, r3
 8000976:	f003 031f 	and.w	r3, r3, #31
 800097a:	fa08 f303 	lsl.w	r3, r8, r3
 800097e:	4213      	tst	r3, r2
 8000980:	d0bd      	beq.n	80008fe <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000982:	f7ff fc63 	bl	800024c <HAL_GetTick>
 8000986:	f241 3388 	movw	r3, #5000	; 0x1388
 800098a:	eba0 000a 	sub.w	r0, r0, sl
 800098e:	4298      	cmp	r0, r3
 8000990:	d9e7      	bls.n	8000962 <HAL_RCC_OscConfig+0x372>
 8000992:	e694      	b.n	80006be <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000994:	2b05      	cmp	r3, #5
 8000996:	6a23      	ldr	r3, [r4, #32]
 8000998:	d103      	bne.n	80009a2 <HAL_RCC_OscConfig+0x3b2>
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6223      	str	r3, [r4, #32]
 80009a0:	e791      	b.n	80008c6 <HAL_RCC_OscConfig+0x2d6>
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6223      	str	r3, [r4, #32]
 80009a8:	6a23      	ldr	r3, [r4, #32]
 80009aa:	f023 0304 	bic.w	r3, r3, #4
 80009ae:	e78d      	b.n	80008cc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009b0:	f7ff fc4c 	bl	800024c <HAL_GetTick>
 80009b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80009b8:	eba0 000a 	sub.w	r0, r0, sl
 80009bc:	4298      	cmp	r0, r3
 80009be:	d98d      	bls.n	80008dc <HAL_RCC_OscConfig+0x2ec>
 80009c0:	e67d      	b.n	80006be <HAL_RCC_OscConfig+0xce>
 80009c2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009c8:	e78f      	b.n	80008ea <HAL_RCC_OscConfig+0x2fa>
 80009ca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009d0:	e7cd      	b.n	800096e <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d2:	4c41      	ldr	r4, [pc, #260]	; (8000ad8 <HAL_RCC_OscConfig+0x4e8>)
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	f003 030c 	and.w	r3, r3, #12
 80009da:	2b08      	cmp	r3, #8
 80009dc:	f43f ae0c 	beq.w	80005f8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009e0:	2a02      	cmp	r2, #2
 80009e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009e6:	d152      	bne.n	8000a8e <HAL_RCC_OscConfig+0x49e>
 80009e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009ec:	fab3 f383 	clz	r3, r3
 80009f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009fe:	f7ff fc25 	bl	800024c <HAL_GetTick>
 8000a02:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a06:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a08:	2601      	movs	r6, #1
 8000a0a:	fa97 f3a7 	rbit	r3, r7
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	fa97 f3a7 	rbit	r3, r7
 8000a14:	fab3 f383 	clz	r3, r3
 8000a18:	f003 031f 	and.w	r3, r3, #31
 8000a1c:	fa06 f303 	lsl.w	r3, r6, r3
 8000a20:	4213      	tst	r3, r2
 8000a22:	d12d      	bne.n	8000a80 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a24:	6862      	ldr	r2, [r4, #4]
 8000a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a28:	6a29      	ldr	r1, [r5, #32]
 8000a2a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a2e:	430b      	orrs	r3, r1
 8000a30:	4313      	orrs	r3, r2
 8000a32:	6063      	str	r3, [r4, #4]
 8000a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a38:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a3c:	fab3 f383 	clz	r3, r3
 8000a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a4e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000a50:	f7ff fbfc 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a54:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000a56:	4607      	mov	r7, r0
 8000a58:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a5c:	6822      	ldr	r2, [r4, #0]
 8000a5e:	fa95 f3a5 	rbit	r3, r5
 8000a62:	fab3 f383 	clz	r3, r3
 8000a66:	f003 031f 	and.w	r3, r3, #31
 8000a6a:	fa06 f303 	lsl.w	r3, r6, r3
 8000a6e:	4213      	tst	r3, r2
 8000a70:	f47f add9 	bne.w	8000626 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a74:	f7ff fbea 	bl	800024c <HAL_GetTick>
 8000a78:	1bc0      	subs	r0, r0, r7
 8000a7a:	2802      	cmp	r0, #2
 8000a7c:	d9ec      	bls.n	8000a58 <HAL_RCC_OscConfig+0x468>
 8000a7e:	e61e      	b.n	80006be <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a80:	f7ff fbe4 	bl	800024c <HAL_GetTick>
 8000a84:	eba0 0008 	sub.w	r0, r0, r8
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9be      	bls.n	8000a0a <HAL_RCC_OscConfig+0x41a>
 8000a8c:	e617      	b.n	80006be <HAL_RCC_OscConfig+0xce>
 8000a8e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a92:	fab3 f383 	clz	r3, r3
 8000a96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fbd2 	bl	800024c <HAL_GetTick>
 8000aa8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000aac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aae:	2601      	movs	r6, #1
 8000ab0:	fa95 f3a5 	rbit	r3, r5
 8000ab4:	6822      	ldr	r2, [r4, #0]
 8000ab6:	fa95 f3a5 	rbit	r3, r5
 8000aba:	fab3 f383 	clz	r3, r3
 8000abe:	f003 031f 	and.w	r3, r3, #31
 8000ac2:	fa06 f303 	lsl.w	r3, r6, r3
 8000ac6:	4213      	tst	r3, r2
 8000ac8:	f43f adad 	beq.w	8000626 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000acc:	f7ff fbbe 	bl	800024c <HAL_GetTick>
 8000ad0:	1bc0      	subs	r0, r0, r7
 8000ad2:	2802      	cmp	r0, #2
 8000ad4:	d9ec      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x4c0>
 8000ad6:	e5f2      	b.n	80006be <HAL_RCC_OscConfig+0xce>
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000adc:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000ade:	4c13      	ldr	r4, [pc, #76]	; (8000b2c <HAL_RCC_GetSysClockFreq+0x50>)
 8000ae0:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ae2:	f001 030c 	and.w	r3, r1, #12
 8000ae6:	2b08      	cmp	r3, #8
 8000ae8:	d11e      	bne.n	8000b28 <HAL_RCC_GetSysClockFreq+0x4c>
 8000aea:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000aee:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000af2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000af6:	fab3 f383 	clz	r3, r3
 8000afa:	fa22 f303 	lsr.w	r3, r2, r3
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b00:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b04:	220f      	movs	r2, #15
 8000b06:	fa92 f2a2 	rbit	r2, r2
 8000b0a:	fab2 f282 	clz	r2, r2
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b16:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b18:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b1a:	bf4a      	itet	mi
 8000b1c:	4b06      	ldrmi	r3, [pc, #24]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b1e:	4b07      	ldrpl	r3, [pc, #28]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b20:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b24:	4358      	muls	r0, r3
 8000b26:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b2a:	bd10      	pop	{r4, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	08001e90 	.word	0x08001e90
 8000b34:	08001ea0 	.word	0x08001ea0
 8000b38:	007a1200 	.word	0x007a1200
 8000b3c:	003d0900 	.word	0x003d0900

08000b40 <HAL_RCC_ClockConfig>:
{
 8000b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b44:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b46:	4604      	mov	r4, r0
 8000b48:	b910      	cbnz	r0, 8000b50 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_RCC_ClockConfig+0x144>)
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d32e      	bcc.n	8000bba <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b5c:	6822      	ldr	r2, [r4, #0]
 8000b5e:	0791      	lsls	r1, r2, #30
 8000b60:	d436      	bmi.n	8000bd0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b62:	07d2      	lsls	r2, r2, #31
 8000b64:	d43c      	bmi.n	8000be0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b66:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <HAL_RCC_ClockConfig+0x144>)
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	429d      	cmp	r5, r3
 8000b70:	d375      	bcc.n	8000c5e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b72:	6822      	ldr	r2, [r4, #0]
 8000b74:	4d44      	ldr	r5, [pc, #272]	; (8000c88 <HAL_RCC_ClockConfig+0x148>)
 8000b76:	f012 0f04 	tst.w	r2, #4
 8000b7a:	d17c      	bne.n	8000c76 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b7c:	0713      	lsls	r3, r2, #28
 8000b7e:	d506      	bpl.n	8000b8e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b80:	686b      	ldr	r3, [r5, #4]
 8000b82:	6922      	ldr	r2, [r4, #16]
 8000b84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b8c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b8e:	f7ff ffa5 	bl	8000adc <HAL_RCC_GetSysClockFreq>
 8000b92:	686b      	ldr	r3, [r5, #4]
 8000b94:	22f0      	movs	r2, #240	; 0xf0
 8000b96:	fa92 f2a2 	rbit	r2, r2
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ba2:	40d3      	lsrs	r3, r2
 8000ba4:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_RCC_ClockConfig+0x14c>)
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	40d8      	lsrs	r0, r3
 8000baa:	4b39      	ldr	r3, [pc, #228]	; (8000c90 <HAL_RCC_ClockConfig+0x150>)
 8000bac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fb0a 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bba:	6813      	ldr	r3, [r2, #0]
 8000bbc:	f023 0307 	bic.w	r3, r3, #7
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bc4:	6813      	ldr	r3, [r2, #0]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d1bd      	bne.n	8000b4a <HAL_RCC_ClockConfig+0xa>
 8000bce:	e7c5      	b.n	8000b5c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bd0:	492d      	ldr	r1, [pc, #180]	; (8000c88 <HAL_RCC_ClockConfig+0x148>)
 8000bd2:	68a0      	ldr	r0, [r4, #8]
 8000bd4:	684b      	ldr	r3, [r1, #4]
 8000bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bda:	4303      	orrs	r3, r0
 8000bdc:	604b      	str	r3, [r1, #4]
 8000bde:	e7c0      	b.n	8000b62 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000be0:	6862      	ldr	r2, [r4, #4]
 8000be2:	4e29      	ldr	r6, [pc, #164]	; (8000c88 <HAL_RCC_ClockConfig+0x148>)
 8000be4:	2a01      	cmp	r2, #1
 8000be6:	d127      	bne.n	8000c38 <HAL_RCC_ClockConfig+0xf8>
 8000be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bec:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf0:	6831      	ldr	r1, [r6, #0]
 8000bf2:	fa93 f3a3 	rbit	r3, r3
 8000bf6:	fab3 f383 	clz	r3, r3
 8000bfa:	f003 031f 	and.w	r3, r3, #31
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c04:	d0a1      	beq.n	8000b4a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c06:	6873      	ldr	r3, [r6, #4]
 8000c08:	f023 0303 	bic.w	r3, r3, #3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000c10:	f7ff fb1c 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c14:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c18:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c1a:	6873      	ldr	r3, [r6, #4]
 8000c1c:	6862      	ldr	r2, [r4, #4]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c26:	d09e      	beq.n	8000b66 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c28:	f7ff fb10 	bl	800024c <HAL_GetTick>
 8000c2c:	1bc0      	subs	r0, r0, r7
 8000c2e:	4540      	cmp	r0, r8
 8000c30:	d9f3      	bls.n	8000c1a <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000c32:	2003      	movs	r0, #3
}
 8000c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c38:	2a02      	cmp	r2, #2
 8000c3a:	bf0c      	ite	eq
 8000c3c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000c40:	2302      	movne	r3, #2
 8000c42:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c46:	6830      	ldr	r0, [r6, #0]
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	fab3 f383 	clz	r3, r3
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	4203      	tst	r3, r0
 8000c5c:	e7d2      	b.n	8000c04 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	f023 0307 	bic.w	r3, r3, #7
 8000c64:	432b      	orrs	r3, r5
 8000c66:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c68:	6813      	ldr	r3, [r2, #0]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	429d      	cmp	r5, r3
 8000c70:	f47f af6b 	bne.w	8000b4a <HAL_RCC_ClockConfig+0xa>
 8000c74:	e77d      	b.n	8000b72 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c76:	686b      	ldr	r3, [r5, #4]
 8000c78:	68e1      	ldr	r1, [r4, #12]
 8000c7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	606b      	str	r3, [r5, #4]
 8000c82:	e77b      	b.n	8000b7c <HAL_RCC_ClockConfig+0x3c>
 8000c84:	40022000 	.word	0x40022000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	08001eb4 	.word	0x08001eb4
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	fa92 f2a2 	rbit	r2, r2
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ca8:	40d3      	lsrs	r3, r2
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8000cac:	5cd3      	ldrb	r3, [r2, r3]
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000cb0:	6810      	ldr	r0, [r2, #0]
}    
 8000cb2:	40d8      	lsrs	r0, r3
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	08001ec4 	.word	0x08001ec4
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000cc6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	fa92 f2a2 	rbit	r2, r2
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000cd8:	40d3      	lsrs	r3, r2
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8000cdc:	5cd3      	ldrb	r3, [r2, r3]
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ce0:	6810      	ldr	r0, [r2, #0]
} 
 8000ce2:	40d8      	lsrs	r0, r3
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	08001ec4 	.word	0x08001ec4
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000cf4:	6803      	ldr	r3, [r0, #0]
{
 8000cf6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000cfa:	03dd      	lsls	r5, r3, #15
{
 8000cfc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000cfe:	d522      	bpl.n	8000d46 <HAL_RCCEx_PeriphCLKConfig+0x52>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d00:	4d72      	ldr	r5, [pc, #456]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000d02:	69eb      	ldr	r3, [r5, #28]
 8000d04:	00d8      	lsls	r0, r3, #3
 8000d06:	f100 8085 	bmi.w	8000e14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	69eb      	ldr	r3, [r5, #28]
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	61eb      	str	r3, [r5, #28]
 8000d12:	69eb      	ldr	r3, [r5, #28]
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d1c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1e:	4f6c      	ldr	r7, [pc, #432]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	05d9      	lsls	r1, r3, #23
 8000d24:	d578      	bpl.n	8000e18 <HAL_RCCEx_PeriphCLKConfig+0x124>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d26:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d28:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000d2c:	f040 8089 	bne.w	8000e42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000d30:	6a2b      	ldr	r3, [r5, #32]
 8000d32:	6862      	ldr	r2, [r4, #4]
 8000d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d3c:	b11e      	cbz	r6, 8000d46 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d3e:	69eb      	ldr	r3, [r5, #28]
 8000d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d44:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000d46:	6820      	ldr	r0, [r4, #0]
 8000d48:	07c5      	lsls	r5, r0, #31
 8000d4a:	d506      	bpl.n	8000d5a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000d4c:	4a5f      	ldr	r2, [pc, #380]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000d4e:	68a1      	ldr	r1, [r4, #8]
 8000d50:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d52:	f023 0303 	bic.w	r3, r3, #3
 8000d56:	430b      	orrs	r3, r1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000d5a:	0681      	lsls	r1, r0, #26
 8000d5c:	d506      	bpl.n	8000d6c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000d5e:	4a5b      	ldr	r2, [pc, #364]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000d60:	68e1      	ldr	r1, [r4, #12]
 8000d62:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d64:	f023 0310 	bic.w	r3, r3, #16
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d6c:	0382      	lsls	r2, r0, #14
 8000d6e:	d506      	bpl.n	8000d7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000d70:	4a56      	ldr	r2, [pc, #344]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000d72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d74:	6853      	ldr	r3, [r2, #4]
 8000d76:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000d7e:	0643      	lsls	r3, r0, #25
 8000d80:	d506      	bpl.n	8000d90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000d82:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000d84:	6921      	ldr	r1, [r4, #16]
 8000d86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d88:	f023 0320 	bic.w	r3, r3, #32
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000d90:	0407      	lsls	r7, r0, #16
 8000d92:	d506      	bpl.n	8000da2 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000d94:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000d96:	6961      	ldr	r1, [r4, #20]
 8000d98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000da2:	0586      	lsls	r6, r0, #22
 8000da4:	d506      	bpl.n	8000db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000da6:	4a49      	ldr	r2, [pc, #292]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000da8:	69e1      	ldr	r1, [r4, #28]
 8000daa:	6853      	ldr	r3, [r2, #4]
 8000dac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8000db4:	0605      	lsls	r5, r0, #24
 8000db6:	d506      	bpl.n	8000dc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8000db8:	4a44      	ldr	r2, [pc, #272]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000dba:	69a1      	ldr	r1, [r4, #24]
 8000dbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000dbe:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000dc2:	430b      	orrs	r3, r1
 8000dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000dc6:	04c1      	lsls	r1, r0, #19
 8000dc8:	d506      	bpl.n	8000dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000dca:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000dcc:	6a21      	ldr	r1, [r4, #32]
 8000dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000dd8:	0342      	lsls	r2, r0, #13
 8000dda:	d506      	bpl.n	8000dea <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000ddc:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000dde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000de0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000dea:	0303      	lsls	r3, r0, #12
 8000dec:	d506      	bpl.n	8000dfc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000df0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000df2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000dfc:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8000e00:	d01c      	beq.n	8000e3c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000e02:	4a32      	ldr	r2, [pc, #200]	; (8000ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8000e04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000e10:	2000      	movs	r0, #0
 8000e12:	e013      	b.n	8000e3c <HAL_RCCEx_PeriphCLKConfig+0x148>
    FlagStatus       pwrclkchanged = RESET;
 8000e14:	2600      	movs	r6, #0
 8000e16:	e782      	b.n	8000d1e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e20:	f7ff fa14 	bl	800024c <HAL_GetTick>
 8000e24:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	05da      	lsls	r2, r3, #23
 8000e2a:	f53f af7c 	bmi.w	8000d26 <HAL_RCCEx_PeriphCLKConfig+0x32>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2e:	f7ff fa0d 	bl	800024c <HAL_GetTick>
 8000e32:	eba0 0008 	sub.w	r0, r0, r8
 8000e36:	2864      	cmp	r0, #100	; 0x64
 8000e38:	d9f5      	bls.n	8000e26 <HAL_RCCEx_PeriphCLKConfig+0x132>
          return HAL_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
}
 8000e3c:	b002      	add	sp, #8
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e42:	6862      	ldr	r2, [r4, #4]
 8000e44:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	f43f af71 	beq.w	8000d30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e4e:	6a29      	ldr	r1, [r5, #32]
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000e58:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e5c:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	4472      	add	r2, lr
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	2701      	movs	r7, #1
 8000e6a:	6017      	str	r7, [r2, #0]
 8000e6c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e70:	fab3 f383 	clz	r3, r3
 8000e74:	4473      	add	r3, lr
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e7c:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8000e7e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e80:	f57f af56 	bpl.w	8000d30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 8000e84:	f7ff f9e2 	bl	800024c <HAL_GetTick>
 8000e88:	f04f 0802 	mov.w	r8, #2
 8000e8c:	4682      	mov	sl, r0
 8000e8e:	46c1      	mov	r9, r8
 8000e90:	fa98 f3a8 	rbit	r3, r8
 8000e94:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e98:	b1a3      	cbz	r3, 8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8000e9a:	6a2a      	ldr	r2, [r5, #32]
 8000e9c:	fa99 f3a9 	rbit	r3, r9
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	fa07 f303 	lsl.w	r3, r7, r3
 8000eac:	4213      	tst	r3, r2
 8000eae:	f47f af3f 	bne.w	8000d30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff f9cb 	bl	800024c <HAL_GetTick>
 8000eb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eba:	eba0 000a 	sub.w	r0, r0, sl
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d9e6      	bls.n	8000e90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8000ec2:	e7ba      	b.n	8000e3a <HAL_RCCEx_PeriphCLKConfig+0x146>
 8000ec4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000eca:	e7e7      	b.n	8000e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40007000 	.word	0x40007000
 8000ed4:	10908100 	.word	0x10908100

08000ed8 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ed8:	6803      	ldr	r3, [r0, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ee2:	6842      	ldr	r2, [r0, #4]
 8000ee4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ee8:	d10a      	bne.n	8000f00 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8000eea:	6882      	ldr	r2, [r0, #8]
 8000eec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000ef0:	d002      	beq.n	8000ef8 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ef2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000ef6:	d103      	bne.n	8000f00 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f00:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000f02:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f06:	d107      	bne.n	8000f18 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8000f24:	2003      	movs	r0, #3
 8000f26:	4770      	bx	lr

08000f28 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000f38:	d00d      	beq.n	8000f56 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8000f3a:	1c62      	adds	r2, r4, #1
 8000f3c:	d0f9      	beq.n	8000f32 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000f3e:	b924      	cbnz	r4, 8000f4a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8000f40:	4628      	mov	r0, r5
}
 8000f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000f46:	f7ff bfc7 	b.w	8000ed8 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000f4a:	f7ff f97f 	bl	800024c <HAL_GetTick>
 8000f4e:	1b80      	subs	r0, r0, r6
 8000f50:	4284      	cmp	r4, r0
 8000f52:	d8ed      	bhi.n	8000f30 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8000f54:	e7f4      	b.n	8000f40 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8000f56:	bd70      	pop	{r4, r5, r6, pc}

08000f58 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460c      	mov	r4, r1
 8000f5e:	4615      	mov	r5, r2
 8000f60:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8000f62:	6831      	ldr	r1, [r6, #0]
 8000f64:	6888      	ldr	r0, [r1, #8]
 8000f66:	4020      	ands	r0, r4
 8000f68:	d00e      	beq.n	8000f88 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000f6a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000f6e:	bf01      	itttt	eq
 8000f70:	7b0a      	ldrbeq	r2, [r1, #12]
 8000f72:	b2d2      	uxtbeq	r2, r2
 8000f74:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8000f78:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8000f7c:	1c6b      	adds	r3, r5, #1
 8000f7e:	d0f1      	beq.n	8000f64 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000f80:	b925      	cbnz	r5, 8000f8c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8000f82:	4630      	mov	r0, r6
 8000f84:	f7ff ffa8 	bl	8000ed8 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000f88:	b003      	add	sp, #12
 8000f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000f8c:	f7ff f95e 	bl	800024c <HAL_GetTick>
 8000f90:	1bc0      	subs	r0, r0, r7
 8000f92:	4285      	cmp	r5, r0
 8000f94:	d8e5      	bhi.n	8000f62 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8000f96:	e7f4      	b.n	8000f82 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08000f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000f98:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000f9a:	4613      	mov	r3, r2
{
 8000f9c:	460d      	mov	r5, r1
 8000f9e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8000fa6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000fa8:	f7ff ffd6 	bl	8000f58 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000fac:	b128      	cbz	r0, 8000fba <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000fae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	e00f      	b.n	8000fda <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000fba:	4632      	mov	r2, r6
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff ffb2 	bl	8000f28 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d1f2      	bne.n	8000fae <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000fc8:	4633      	mov	r3, r6
 8000fca:	462a      	mov	r2, r5
 8000fcc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff ffc1 	bl	8000f58 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d1e9      	bne.n	8000fae <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000fda:	bd70      	pop	{r4, r5, r6, pc}

08000fdc <SPI_EndRxTransaction>:
{
 8000fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fde:	6843      	ldr	r3, [r0, #4]
 8000fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	460e      	mov	r6, r1
 8000fe8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fea:	d10b      	bne.n	8001004 <SPI_EndRxTransaction+0x28>
 8000fec:	6883      	ldr	r3, [r0, #8]
 8000fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff2:	d002      	beq.n	8000ffa <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d104      	bne.n	8001004 <SPI_EndRxTransaction+0x28>
    __HAL_SPI_DISABLE(hspi);
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001002:	601a      	str	r2, [r3, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001004:	463a      	mov	r2, r7
 8001006:	4631      	mov	r1, r6
 8001008:	4620      	mov	r0, r4
 800100a:	f7ff ff8d 	bl	8000f28 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800100e:	4605      	mov	r5, r0
 8001010:	b128      	cbz	r0, 800101e <SPI_EndRxTransaction+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001012:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800101a:	2503      	movs	r5, #3
 800101c:	e013      	b.n	8001046 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001024:	d10f      	bne.n	8001046 <SPI_EndRxTransaction+0x6a>
 8001026:	68a3      	ldr	r3, [r4, #8]
 8001028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800102c:	d002      	beq.n	8001034 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800102e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001032:	d108      	bne.n	8001046 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4632      	mov	r2, r6
 8001038:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800103c:	4620      	mov	r0, r4
 800103e:	f7ff ff8b 	bl	8000f58 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001042:	2800      	cmp	r0, #0
 8001044:	d1e5      	bne.n	8001012 <SPI_EndRxTransaction+0x36>
}
 8001046:	4628      	mov	r0, r5
 8001048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800104a <HAL_SPI_Init>:
{
 800104a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800104c:	4604      	mov	r4, r0
 800104e:	2800      	cmp	r0, #0
 8001050:	d04e      	beq.n	80010f0 <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001056:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800105a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800105e:	b91b      	cbnz	r3, 8001068 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001060:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001064:	f000 fd14 	bl	8001a90 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001068:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800106a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800106c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001070:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001072:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001078:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800107c:	600b      	str	r3, [r1, #0]
 800107e:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001082:	d932      	bls.n	80010ea <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001084:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001086:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800108a:	bf18      	it	ne
 800108c:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800108e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001090:	b92b      	cbnz	r3, 800109e <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001092:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001096:	bf8c      	ite	hi
 8001098:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800109a:	2301      	movls	r3, #1
 800109c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800109e:	68a6      	ldr	r6, [r4, #8]
 80010a0:	6863      	ldr	r3, [r4, #4]
 80010a2:	69a5      	ldr	r5, [r4, #24]
 80010a4:	4333      	orrs	r3, r6
 80010a6:	6926      	ldr	r6, [r4, #16]
 80010a8:	4333      	orrs	r3, r6
 80010aa:	6966      	ldr	r6, [r4, #20]
 80010ac:	4333      	orrs	r3, r6
 80010ae:	69e6      	ldr	r6, [r4, #28]
 80010b0:	4333      	orrs	r3, r6
 80010b2:	6a26      	ldr	r6, [r4, #32]
 80010b4:	4333      	orrs	r3, r6
 80010b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80010b8:	4333      	orrs	r3, r6
 80010ba:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80010be:	4333      	orrs	r3, r6
 80010c0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80010c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010c4:	431a      	orrs	r2, r3
 80010c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010c8:	0c2d      	lsrs	r5, r5, #16
 80010ca:	431a      	orrs	r2, r3
 80010cc:	f005 0504 	and.w	r5, r5, #4
 80010d0:	432a      	orrs	r2, r5
 80010d2:	4302      	orrs	r2, r0
 80010d4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010d6:	69cb      	ldr	r3, [r1, #28]
 80010d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010dc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010de:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80010e0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010e2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80010e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80010ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80010ee:	e7cc      	b.n	800108a <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
}
 80010f2:	bd70      	pop	{r4, r5, r6, pc}

080010f4 <HAL_SPI_TransmitReceive>:
{
 80010f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010f8:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80010fa:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80010fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8001102:	2b01      	cmp	r3, #1
{
 8001104:	4604      	mov	r4, r0
 8001106:	460d      	mov	r5, r1
 8001108:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800110a:	f000 811c 	beq.w	8001346 <HAL_SPI_TransmitReceive+0x252>
 800110e:	2301      	movs	r3, #1
 8001110:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001114:	f7ff f89a 	bl	800024c <HAL_GetTick>
  tmp  = hspi->State;
 8001118:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800111c:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800111e:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001120:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001122:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001124:	d00a      	beq.n	800113c <HAL_SPI_TransmitReceive+0x48>
 8001126:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800112a:	f040 8108 	bne.w	800133e <HAL_SPI_TransmitReceive+0x24a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800112e:	68a2      	ldr	r2, [r4, #8]
 8001130:	2a00      	cmp	r2, #0
 8001132:	f040 8104 	bne.w	800133e <HAL_SPI_TransmitReceive+0x24a>
 8001136:	2b04      	cmp	r3, #4
 8001138:	f040 8101 	bne.w	800133e <HAL_SPI_TransmitReceive+0x24a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800113c:	2d00      	cmp	r5, #0
 800113e:	f000 8100 	beq.w	8001342 <HAL_SPI_TransmitReceive+0x24e>
 8001142:	2e00      	cmp	r6, #0
 8001144:	f000 80fd 	beq.w	8001342 <HAL_SPI_TransmitReceive+0x24e>
 8001148:	2f00      	cmp	r7, #0
 800114a:	f000 80fa 	beq.w	8001342 <HAL_SPI_TransmitReceive+0x24e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800114e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001152:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001154:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001156:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001158:	bf1c      	itt	ne
 800115a:	2305      	movne	r3, #5
 800115c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001160:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001162:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001166:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8001168:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800116a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800116e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8001170:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001174:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001176:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001178:	87a7      	strh	r7, [r4, #60]	; 0x3c
 800117a:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800117c:	d804      	bhi.n	8001188 <HAL_SPI_TransmitReceive+0x94>
 800117e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001182:	b292      	uxth	r2, r2
 8001184:	2a01      	cmp	r2, #1
 8001186:	d92e      	bls.n	80011e6 <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800118e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001194:	bf5e      	ittt	pl
 8001196:	681a      	ldrpl	r2, [r3, #0]
 8001198:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800119c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800119e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80011a2:	d958      	bls.n	8001256 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80011a4:	b119      	cbz	r1, 80011ae <HAL_SPI_TransmitReceive+0xba>
 80011a6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80011a8:	b292      	uxth	r2, r2
 80011aa:	2a01      	cmp	r2, #1
 80011ac:	d106      	bne.n	80011bc <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80011ae:	f835 2b02 	ldrh.w	r2, [r5], #2
 80011b2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80011b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80011bc:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80011be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b9a3      	cbnz	r3, 80011ee <HAL_SPI_TransmitReceive+0xfa>
 80011c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b983      	cbnz	r3, 80011ee <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80011cc:	464a      	mov	r2, r9
 80011ce:	4641      	mov	r1, r8
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fee1 	bl	8000f98 <SPI_EndRxTxTransaction>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	f040 80ae 	bne.w	8001338 <HAL_SPI_TransmitReceive+0x244>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80011dc:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80011de:	3000      	adds	r0, #0
 80011e0:	bf18      	it	ne
 80011e2:	2001      	movne	r0, #1
 80011e4:	e02f      	b.n	8001246 <HAL_SPI_TransmitReceive+0x152>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ec:	e7cf      	b.n	800118e <HAL_SPI_TransmitReceive+0x9a>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80011ee:	b177      	cbz	r7, 800120e <HAL_SPI_TransmitReceive+0x11a>
 80011f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b15b      	cbz	r3, 800120e <HAL_SPI_TransmitReceive+0x11a>
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	0792      	lsls	r2, r2, #30
 80011fc:	d507      	bpl.n	800120e <HAL_SPI_TransmitReceive+0x11a>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80011fe:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001202:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001204:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001206:	3b01      	subs	r3, #1
 8001208:	b29b      	uxth	r3, r3
 800120a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800120c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800120e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001212:	b29b      	uxth	r3, r3
 8001214:	b16b      	cbz	r3, 8001232 <HAL_SPI_TransmitReceive+0x13e>
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	07d0      	lsls	r0, r2, #31
 800121c:	d509      	bpl.n	8001232 <HAL_SPI_TransmitReceive+0x13e>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001224:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001228:	3b01      	subs	r3, #1
 800122a:	b29b      	uxth	r3, r3
 800122c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8001230:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001232:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001236:	d0c2      	beq.n	80011be <HAL_SPI_TransmitReceive+0xca>
 8001238:	f7ff f808 	bl	800024c <HAL_GetTick>
 800123c:	eba0 0009 	sub.w	r0, r0, r9
 8001240:	4580      	cmp	r8, r0
 8001242:	d8bc      	bhi.n	80011be <HAL_SPI_TransmitReceive+0xca>
        errorcode = HAL_TIMEOUT;
 8001244:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001246:	2301      	movs	r3, #1
 8001248:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800124c:	2300      	movs	r3, #0
 800124e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8001252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001256:	b119      	cbz	r1, 8001260 <HAL_SPI_TransmitReceive+0x16c>
 8001258:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800125a:	b292      	uxth	r2, r2
 800125c:	2a01      	cmp	r2, #1
 800125e:	d10a      	bne.n	8001276 <HAL_SPI_TransmitReceive+0x182>
      if (hspi->TxXferCount > 1U)
 8001260:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001262:	b292      	uxth	r2, r2
 8001264:	2a01      	cmp	r2, #1
 8001266:	d94d      	bls.n	8001304 <HAL_SPI_TransmitReceive+0x210>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001268:	f835 2b02 	ldrh.w	r2, [r5], #2
 800126c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800126e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001270:	3b02      	subs	r3, #2
 8001272:	b29b      	uxth	r3, r3
 8001274:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001276:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001278:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800127a:	b29b      	uxth	r3, r3
 800127c:	b923      	cbnz	r3, 8001288 <HAL_SPI_TransmitReceive+0x194>
 800127e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001282:	b29b      	uxth	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0a1      	beq.n	80011cc <HAL_SPI_TransmitReceive+0xd8>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001288:	b197      	cbz	r7, 80012b0 <HAL_SPI_TransmitReceive+0x1bc>
 800128a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800128c:	b29b      	uxth	r3, r3
 800128e:	b17b      	cbz	r3, 80012b0 <HAL_SPI_TransmitReceive+0x1bc>
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	0791      	lsls	r1, r2, #30
 8001296:	d50b      	bpl.n	80012b0 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8001298:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800129a:	b292      	uxth	r2, r2
 800129c:	2a01      	cmp	r2, #1
 800129e:	d939      	bls.n	8001314 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80012a0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80012a4:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80012a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012a8:	3b02      	subs	r3, #2
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80012ae:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80012b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b1db      	cbz	r3, 80012f0 <HAL_SPI_TransmitReceive+0x1fc>
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	07d2      	lsls	r2, r2, #31
 80012be:	d517      	bpl.n	80012f0 <HAL_SPI_TransmitReceive+0x1fc>
        if (hspi->RxXferCount > 1U)
 80012c0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80012c4:	b292      	uxth	r2, r2
 80012c6:	2a01      	cmp	r2, #1
 80012c8:	d92c      	bls.n	8001324 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 80012d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80012d4:	3a02      	subs	r2, #2
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80012dc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80012e0:	b292      	uxth	r2, r2
 80012e2:	2a01      	cmp	r2, #1
 80012e4:	d803      	bhi.n	80012ee <HAL_SPI_TransmitReceive+0x1fa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012ec:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 80012ee:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80012f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80012f4:	d0c0      	beq.n	8001278 <HAL_SPI_TransmitReceive+0x184>
 80012f6:	f7fe ffa9 	bl	800024c <HAL_GetTick>
 80012fa:	eba0 0009 	sub.w	r0, r0, r9
 80012fe:	4580      	cmp	r8, r0
 8001300:	d8ba      	bhi.n	8001278 <HAL_SPI_TransmitReceive+0x184>
 8001302:	e79f      	b.n	8001244 <HAL_SPI_TransmitReceive+0x150>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001304:	782a      	ldrb	r2, [r5, #0]
 8001306:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001308:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800130a:	3b01      	subs	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001310:	3501      	adds	r5, #1
 8001312:	e7b0      	b.n	8001276 <HAL_SPI_TransmitReceive+0x182>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001314:	782a      	ldrb	r2, [r5, #0]
 8001316:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001318:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800131a:	3b01      	subs	r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001320:	3501      	adds	r5, #1
 8001322:	e7c4      	b.n	80012ae <HAL_SPI_TransmitReceive+0x1ba>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001324:	7b1b      	ldrb	r3, [r3, #12]
 8001326:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8001328:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800132c:	3b01      	subs	r3, #1
 800132e:	b29b      	uxth	r3, r3
 8001330:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001334:	3601      	adds	r6, #1
 8001336:	e7da      	b.n	80012ee <HAL_SPI_TransmitReceive+0x1fa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001338:	2320      	movs	r3, #32
 800133a:	6623      	str	r3, [r4, #96]	; 0x60
 800133c:	e74e      	b.n	80011dc <HAL_SPI_TransmitReceive+0xe8>
    errorcode = HAL_BUSY;
 800133e:	2002      	movs	r0, #2
 8001340:	e781      	b.n	8001246 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_ERROR;
 8001342:	2001      	movs	r0, #1
 8001344:	e77f      	b.n	8001246 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8001346:	2002      	movs	r0, #2
}
 8001348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800134c <HAL_SPI_Receive>:
{
 800134c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001350:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001352:	6843      	ldr	r3, [r0, #4]
 8001354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001358:	4604      	mov	r4, r0
 800135a:	460e      	mov	r6, r1
 800135c:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800135e:	d10c      	bne.n	800137a <HAL_SPI_Receive+0x2e>
 8001360:	6883      	ldr	r3, [r0, #8]
 8001362:	b953      	cbnz	r3, 800137a <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001364:	2304      	movs	r3, #4
 8001366:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800136a:	4613      	mov	r3, r2
 800136c:	9500      	str	r5, [sp, #0]
 800136e:	460a      	mov	r2, r1
 8001370:	f7ff fec0 	bl	80010f4 <HAL_SPI_TransmitReceive>
}
 8001374:	b002      	add	sp, #8
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800137a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800137e:	2b01      	cmp	r3, #1
 8001380:	f000 808b 	beq.w	800149a <HAL_SPI_Receive+0x14e>
 8001384:	2301      	movs	r3, #1
 8001386:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800138a:	f7fe ff5f 	bl	800024c <HAL_GetTick>
 800138e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001390:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001394:	b2c0      	uxtb	r0, r0
 8001396:	2801      	cmp	r0, #1
 8001398:	d17d      	bne.n	8001496 <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 800139a:	2e00      	cmp	r6, #0
 800139c:	d05f      	beq.n	800145e <HAL_SPI_Receive+0x112>
 800139e:	f1b8 0f00 	cmp.w	r8, #0
 80013a2:	d05c      	beq.n	800145e <HAL_SPI_Receive+0x112>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80013a4:	2304      	movs	r3, #4
 80013a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80013aa:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013ac:	68e2      	ldr	r2, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80013ae:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80013b4:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80013b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80013ba:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80013bc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80013be:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80013c0:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013c2:	684b      	ldr	r3, [r1, #4]
  hspi->RxXferSize  = Size;
 80013c4:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013c8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013cc:	bf8c      	ite	hi
 80013ce:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013d2:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 80013d6:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013d8:	68a3      	ldr	r3, [r4, #8]
 80013da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 80013de:	bf02      	ittt	eq
 80013e0:	680b      	ldreq	r3, [r1, #0]
 80013e2:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 80013e6:	600b      	streq	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013e8:	680b      	ldr	r3, [r1, #0]
 80013ea:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80013ec:	bf5e      	ittt	pl
 80013ee:	680b      	ldrpl	r3, [r1, #0]
 80013f0:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80013f4:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80013f6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80013fa:	d91e      	bls.n	800143a <HAL_SPI_Receive+0xee>
    while (hspi->RxXferCount > 0U)
 80013fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001400:	b29b      	uxth	r3, r3
 8001402:	b1fb      	cbz	r3, 8001444 <HAL_SPI_Receive+0xf8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	07d2      	lsls	r2, r2, #31
 800140a:	d537      	bpl.n	800147c <HAL_SPI_Receive+0x130>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001412:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001416:	3b01      	subs	r3, #1
 8001418:	b29b      	uxth	r3, r3
 800141a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800141e:	e7ed      	b.n	80013fc <HAL_SPI_Receive+0xb0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	07d0      	lsls	r0, r2, #31
 8001426:	d518      	bpl.n	800145a <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001428:	7b1b      	ldrb	r3, [r3, #12]
 800142a:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800142e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001432:	3b01      	subs	r3, #1
 8001434:	b29b      	uxth	r3, r3
 8001436:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800143a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800143e:	b29b      	uxth	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ed      	bne.n	8001420 <HAL_SPI_Receive+0xd4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001444:	463a      	mov	r2, r7
 8001446:	4629      	mov	r1, r5
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fdc7 	bl	8000fdc <SPI_EndRxTransaction>
 800144e:	b9f8      	cbnz	r0, 8001490 <HAL_SPI_Receive+0x144>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001450:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001452:	3000      	adds	r0, #0
 8001454:	bf18      	it	ne
 8001456:	2001      	movne	r0, #1
 8001458:	e001      	b.n	800145e <HAL_SPI_Receive+0x112>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800145a:	b93d      	cbnz	r5, 800146c <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 800145c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800145e:	2301      	movs	r3, #1
 8001460:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001464:	2300      	movs	r3, #0
 8001466:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800146a:	e783      	b.n	8001374 <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800146c:	1c69      	adds	r1, r5, #1
 800146e:	d0e4      	beq.n	800143a <HAL_SPI_Receive+0xee>
 8001470:	f7fe feec 	bl	800024c <HAL_GetTick>
 8001474:	1bc0      	subs	r0, r0, r7
 8001476:	4285      	cmp	r5, r0
 8001478:	d8df      	bhi.n	800143a <HAL_SPI_Receive+0xee>
 800147a:	e7ef      	b.n	800145c <HAL_SPI_Receive+0x110>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800147c:	2d00      	cmp	r5, #0
 800147e:	d0ed      	beq.n	800145c <HAL_SPI_Receive+0x110>
 8001480:	1c6b      	adds	r3, r5, #1
 8001482:	d0bb      	beq.n	80013fc <HAL_SPI_Receive+0xb0>
 8001484:	f7fe fee2 	bl	800024c <HAL_GetTick>
 8001488:	1bc0      	subs	r0, r0, r7
 800148a:	4285      	cmp	r5, r0
 800148c:	d8b6      	bhi.n	80013fc <HAL_SPI_Receive+0xb0>
 800148e:	e7e5      	b.n	800145c <HAL_SPI_Receive+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001490:	2320      	movs	r3, #32
 8001492:	6623      	str	r3, [r4, #96]	; 0x60
 8001494:	e7dc      	b.n	8001450 <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 8001496:	2002      	movs	r0, #2
 8001498:	e7e1      	b.n	800145e <HAL_SPI_Receive+0x112>
  __HAL_LOCK(hspi);
 800149a:	2002      	movs	r0, #2
 800149c:	e76a      	b.n	8001374 <HAL_SPI_Receive+0x28>
	...

080014a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014a4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014a6:	6921      	ldr	r1, [r4, #16]
 80014a8:	68a3      	ldr	r3, [r4, #8]
 80014aa:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014ac:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014ae:	430b      	orrs	r3, r1
 80014b0:	6961      	ldr	r1, [r4, #20]
 80014b2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014b4:	4949      	ldr	r1, [pc, #292]	; (80015dc <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014b6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014b8:	4001      	ands	r1, r0
 80014ba:	430b      	orrs	r3, r1
 80014bc:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014be:	686b      	ldr	r3, [r5, #4]
 80014c0:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014c2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c8:	430b      	orrs	r3, r1
 80014ca:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014cc:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014ce:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014d0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014d4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014d6:	430b      	orrs	r3, r1
 80014d8:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <UART_SetConfig+0x140>)
 80014dc:	429d      	cmp	r5, r3
 80014de:	d112      	bne.n	8001506 <UART_SetConfig+0x66>
 80014e0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80014e4:	493f      	ldr	r1, [pc, #252]	; (80015e4 <UART_SetConfig+0x144>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80014f0:	5ccb      	ldrb	r3, [r1, r3]
 80014f2:	d13b      	bne.n	800156c <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d836      	bhi.n	8001566 <UART_SetConfig+0xc6>
 80014f8:	e8df f003 	tbb	[pc, r3]
 80014fc:	3524210f 	.word	0x3524210f
 8001500:	3535352d 	.word	0x3535352d
 8001504:	30          	.byte	0x30
 8001505:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <UART_SetConfig+0x148>)
 8001508:	429d      	cmp	r5, r3
 800150a:	d003      	beq.n	8001514 <UART_SetConfig+0x74>
 800150c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001510:	429d      	cmp	r5, r3
 8001512:	d15e      	bne.n	80015d2 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001514:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001518:	d131      	bne.n	800157e <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800151a:	f7ff fbbb 	bl	8000c94 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800151e:	6861      	ldr	r1, [r4, #4]
 8001520:	084a      	lsrs	r2, r1, #1
 8001522:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800152a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800152c:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800152e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001532:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001534:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001538:	4313      	orrs	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
 800153c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800153e:	f7ff fbc1 	bl	8000cc4 <HAL_RCC_GetPCLK2Freq>
 8001542:	e7ec      	b.n	800151e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001544:	6860      	ldr	r0, [r4, #4]
 8001546:	0843      	lsrs	r3, r0, #1
 8001548:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800154c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001550:	fbb3 f3f0 	udiv	r3, r3, r0
 8001554:	e7e9      	b.n	800152a <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001556:	f7ff fac1 	bl	8000adc <HAL_RCC_GetSysClockFreq>
 800155a:	e7e0      	b.n	800151e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800155c:	6860      	ldr	r0, [r4, #4]
 800155e:	0843      	lsrs	r3, r0, #1
 8001560:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001564:	e7f4      	b.n	8001550 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001566:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001568:	2300      	movs	r3, #0
 800156a:	e7e0      	b.n	800152e <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 800156c:	2b08      	cmp	r3, #8
 800156e:	d833      	bhi.n	80015d8 <UART_SetConfig+0x138>
 8001570:	e8df f003 	tbb	[pc, r3]
 8001574:	321b1005 	.word	0x321b1005
 8001578:	32323227 	.word	0x32323227
 800157c:	2a          	.byte	0x2a
 800157d:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800157e:	f7ff fb89 	bl	8000c94 <HAL_RCC_GetPCLK1Freq>
 8001582:	6863      	ldr	r3, [r4, #4]
 8001584:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001588:	fbb0 f0f3 	udiv	r0, r0, r3
 800158c:	b280      	uxth	r0, r0
 800158e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001590:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8001592:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001594:	f7ff fb96 	bl	8000cc4 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001598:	6863      	ldr	r3, [r4, #4]
 800159a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800159e:	fbb0 f0f3 	udiv	r0, r0, r3
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <UART_SetConfig+0x140>)
 80015a4:	b280      	uxth	r0, r0
 80015a6:	60d8      	str	r0, [r3, #12]
 80015a8:	e7f2      	b.n	8001590 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80015aa:	6862      	ldr	r2, [r4, #4]
 80015ac:	0853      	lsrs	r3, r2, #1
 80015ae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80015b2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80015b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <UART_SetConfig+0x140>)
 80015bc:	b29b      	uxth	r3, r3
 80015be:	60d3      	str	r3, [r2, #12]
 80015c0:	e7e6      	b.n	8001590 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80015c2:	f7ff fa8b 	bl	8000adc <HAL_RCC_GetSysClockFreq>
 80015c6:	e7e7      	b.n	8001598 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80015c8:	6862      	ldr	r2, [r4, #4]
 80015ca:	0853      	lsrs	r3, r2, #1
 80015cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015d0:	e7f1      	b.n	80015b6 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80015d6:	d0c6      	beq.n	8001566 <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	efff69f3 	.word	0xefff69f3
 80015e0:	40013800 	.word	0x40013800
 80015e4:	08001eb0 	.word	0x08001eb0
 80015e8:	40004400 	.word	0x40004400

080015ec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80015ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015ee:	07da      	lsls	r2, r3, #31
{
 80015f0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80015f2:	d506      	bpl.n	8001602 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80015f4:	6801      	ldr	r1, [r0, #0]
 80015f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80015f8:	684a      	ldr	r2, [r1, #4]
 80015fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80015fe:	4322      	orrs	r2, r4
 8001600:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001602:	079c      	lsls	r4, r3, #30
 8001604:	d506      	bpl.n	8001614 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001606:	6801      	ldr	r1, [r0, #0]
 8001608:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800160a:	684a      	ldr	r2, [r1, #4]
 800160c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001610:	4322      	orrs	r2, r4
 8001612:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001614:	0759      	lsls	r1, r3, #29
 8001616:	d506      	bpl.n	8001626 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001618:	6801      	ldr	r1, [r0, #0]
 800161a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800161c:	684a      	ldr	r2, [r1, #4]
 800161e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001622:	4322      	orrs	r2, r4
 8001624:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001626:	071a      	lsls	r2, r3, #28
 8001628:	d506      	bpl.n	8001638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800162a:	6801      	ldr	r1, [r0, #0]
 800162c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800162e:	684a      	ldr	r2, [r1, #4]
 8001630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001634:	4322      	orrs	r2, r4
 8001636:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001638:	06dc      	lsls	r4, r3, #27
 800163a:	d506      	bpl.n	800164a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800163c:	6801      	ldr	r1, [r0, #0]
 800163e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001640:	688a      	ldr	r2, [r1, #8]
 8001642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001646:	4322      	orrs	r2, r4
 8001648:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800164a:	0699      	lsls	r1, r3, #26
 800164c:	d506      	bpl.n	800165c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800164e:	6801      	ldr	r1, [r0, #0]
 8001650:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001652:	688a      	ldr	r2, [r1, #8]
 8001654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001658:	4322      	orrs	r2, r4
 800165a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800165c:	065a      	lsls	r2, r3, #25
 800165e:	d50f      	bpl.n	8001680 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001660:	6801      	ldr	r1, [r0, #0]
 8001662:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001664:	684a      	ldr	r2, [r1, #4]
 8001666:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800166a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800166c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001670:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001672:	d105      	bne.n	8001680 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001674:	684a      	ldr	r2, [r1, #4]
 8001676:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001678:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800167c:	4322      	orrs	r2, r4
 800167e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	d506      	bpl.n	8001692 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001684:	6802      	ldr	r2, [r0, #0]
 8001686:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001688:	6853      	ldr	r3, [r2, #4]
 800168a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800168e:	430b      	orrs	r3, r1
 8001690:	6053      	str	r3, [r2, #4]
 8001692:	bd10      	pop	{r4, pc}

08001694 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001698:	9d06      	ldr	r5, [sp, #24]
 800169a:	4604      	mov	r4, r0
 800169c:	460f      	mov	r7, r1
 800169e:	4616      	mov	r6, r2
 80016a0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016a2:	6821      	ldr	r1, [r4, #0]
 80016a4:	69ca      	ldr	r2, [r1, #28]
 80016a6:	ea37 0302 	bics.w	r3, r7, r2
 80016aa:	bf0c      	ite	eq
 80016ac:	2201      	moveq	r2, #1
 80016ae:	2200      	movne	r2, #0
 80016b0:	42b2      	cmp	r2, r6
 80016b2:	d002      	beq.n	80016ba <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
}
 80016b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80016ba:	1c6b      	adds	r3, r5, #1
 80016bc:	d0f2      	beq.n	80016a4 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016be:	b99d      	cbnz	r5, 80016e8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80016d2:	2320      	movs	r3, #32
 80016d4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80016d8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80016dc:	2300      	movs	r3, #0
 80016de:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80016e2:	2003      	movs	r0, #3
 80016e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016e8:	f7fe fdb0 	bl	800024c <HAL_GetTick>
 80016ec:	eba0 0008 	sub.w	r0, r0, r8
 80016f0:	4285      	cmp	r5, r0
 80016f2:	d2d6      	bcs.n	80016a2 <UART_WaitOnFlagUntilTimeout+0xe>
 80016f4:	e7e4      	b.n	80016c0 <UART_WaitOnFlagUntilTimeout+0x2c>

080016f6 <UART_CheckIdleState>:
{
 80016f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016f8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016fa:	2600      	movs	r6, #0
 80016fc:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80016fe:	f7fe fda5 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001708:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800170a:	d417      	bmi.n	800173c <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	075b      	lsls	r3, r3, #29
 8001712:	d50a      	bpl.n	800172a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	462b      	mov	r3, r5
 800171e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ffb6 	bl	8001694 <UART_WaitOnFlagUntilTimeout>
 8001728:	b9a0      	cbnz	r0, 8001754 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800172a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800172c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800172e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001732:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001736:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800173a:	e00c      	b.n	8001756 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800173c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4632      	mov	r2, r6
 8001744:	4603      	mov	r3, r0
 8001746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff ffa2 	bl	8001694 <UART_WaitOnFlagUntilTimeout>
 8001750:	2800      	cmp	r0, #0
 8001752:	d0db      	beq.n	800170c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001754:	2003      	movs	r0, #3
}
 8001756:	b002      	add	sp, #8
 8001758:	bd70      	pop	{r4, r5, r6, pc}

0800175a <HAL_UART_Init>:
{
 800175a:	b510      	push	{r4, lr}
  if(huart == NULL)
 800175c:	4604      	mov	r4, r0
 800175e:	b360      	cbz	r0, 80017ba <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001760:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001764:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001768:	b91b      	cbnz	r3, 8001772 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800176a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800176e:	f000 fa77 	bl	8001c60 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001772:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001774:	2324      	movs	r3, #36	; 0x24
 8001776:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff fe8c 	bl	80014a0 <UART_SetConfig>
 8001788:	2801      	cmp	r0, #1
 800178a:	d016      	beq.n	80017ba <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800178c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800178e:	b113      	cbz	r3, 8001796 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff ff2b 	bl	80015ec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800179e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017a6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80017ae:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80017b0:	601a      	str	r2, [r3, #0]
}
 80017b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80017b6:	f7ff bf9e 	b.w	80016f6 <UART_CheckIdleState>
}
 80017ba:	2001      	movs	r0, #1
 80017bc:	bd10      	pop	{r4, pc}

080017be <MAX6675_getTemp>:

	return sensor->Value;
}

float MAX6675_getTemp(MAX6675_Typedef* const sensor)
{
 80017be:	b510      	push	{r4, lr}
	sensor->Temp_C = (sensor->MAX6675_getValue(sensor) * 1024)/4095;
 80017c0:	68c3      	ldr	r3, [r0, #12]
{
 80017c2:	4604      	mov	r4, r0
	sensor->Temp_C = (sensor->MAX6675_getValue(sensor) * 1024)/4095;
 80017c4:	4798      	blx	r3
 80017c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80017ca:	0280      	lsls	r0, r0, #10
 80017cc:	fb90 f0f3 	sdiv	r0, r0, r3
 80017d0:	ee07 0a90 	vmov	s15, r0
 80017d4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80017d8:	ed84 0a01 	vstr	s0, [r4, #4]
	return sensor->Temp_C;
}
 80017dc:	bd10      	pop	{r4, pc}

080017de <MAX6675_getState>:

bool MAX6675_getState(MAX6675_Typedef* const sensor)
{
	return sensor->State;
}
 80017de:	7a00      	ldrb	r0, [r0, #8]
 80017e0:	4770      	bx	lr
	...

080017e4 <MAX6675_getValue>:
{
 80017e4:	b513      	push	{r0, r1, r4, lr}
	HAL_SPI_Receive(&hspi3,buffer,1,100);
 80017e6:	2364      	movs	r3, #100	; 0x64
{
 80017e8:	4604      	mov	r4, r0
	HAL_SPI_Receive(&hspi3,buffer,1,100);
 80017ea:	2201      	movs	r2, #1
 80017ec:	a901      	add	r1, sp, #4
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <MAX6675_getValue+0x24>)
 80017f0:	f7ff fdac 	bl	800134c <HAL_SPI_Receive>
	sensor->Value = buffer[1] << 8 | buffer[0];
 80017f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80017f8:	f89d 0004 	ldrb.w	r0, [sp, #4]
	sensor->Value = sensor->Value >> 3;
 80017fc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001800:	08c0      	lsrs	r0, r0, #3
 8001802:	8020      	strh	r0, [r4, #0]
}
 8001804:	b002      	add	sp, #8
 8001806:	bd10      	pop	{r4, pc}
 8001808:	200000e8 	.word	0x200000e8

0800180c <MAX6675_Create>:
	sensor->MAX6675_getTemp = getTemp_f;
	sensor->MAX6675_getValue = getValue_f;
}

MAX6675_Typedef* MAX6675_Create(void)
{
 800180c:	b508      	push	{r3, lr}
	MAX6675_Typedef* sensor = (MAX6675_Typedef*)malloc(sizeof(MAX6675_Typedef));
 800180e:	2018      	movs	r0, #24
 8001810:	f000 faa4 	bl	8001d5c <malloc>
	if (sensor != NULL)
 8001814:	b150      	cbz	r0, 800182c <MAX6675_Create+0x20>
	sensor->State = false;
 8001816:	2300      	movs	r3, #0
 8001818:	7203      	strb	r3, [r0, #8]
	sensor->Value = 0;
 800181a:	8003      	strh	r3, [r0, #0]
	sensor->MAX6675_getState = getState_f;
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <MAX6675_Create+0x24>)
 800181e:	6143      	str	r3, [r0, #20]
	sensor->MAX6675_getTemp = getTemp_f;
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <MAX6675_Create+0x28>)
 8001822:	6103      	str	r3, [r0, #16]
	sensor->Temp_C = 0;
 8001824:	2200      	movs	r2, #0
	sensor->MAX6675_getValue = getValue_f;
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <MAX6675_Create+0x2c>)
	sensor->Temp_C = 0;
 8001828:	6042      	str	r2, [r0, #4]
	sensor->MAX6675_getValue = getValue_f;
 800182a:	60c3      	str	r3, [r0, #12]
	{
		MAX6675_Init(sensor,MAX6675_getValue,MAX6675_getTemp,MAX6675_getState);
	}

	return sensor;
}
 800182c:	bd08      	pop	{r3, pc}
 800182e:	bf00      	nop
 8001830:	080017df 	.word	0x080017df
 8001834:	080017bf 	.word	0x080017bf
 8001838:	080017e5 	.word	0x080017e5

0800183c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800183c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	2214      	movs	r2, #20
{
 8001840:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	eb0d 0002 	add.w	r0, sp, r2
 8001846:	2100      	movs	r1, #0
 8001848:	f000 fa90 	bl	8001d6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800184e:	4d21      	ldr	r5, [pc, #132]	; (80018d4 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800185e:	9201      	str	r2, [sp, #4]
 8001860:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001870:	9202      	str	r2, [sp, #8]
 8001872:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001882:	9203      	str	r2, [sp, #12]
 8001884:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800188c:	615a      	str	r2, [r3, #20]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001898:	4628      	mov	r0, r5
 800189a:	f44f 5100 	mov.w	r1, #8192	; 0x2000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 80018a2:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018a6:	f7fe fe01 	bl	80004ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ac:	480b      	ldr	r0, [pc, #44]	; (80018dc <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ae:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 80018b2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f7fe fd3f 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018bc:	a905      	add	r1, sp, #20
 80018be:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LD2_Pin;
 80018c0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f7fe fd36 	bl	8000338 <HAL_GPIO_Init>

}
 80018cc:	b00a      	add	sp, #40	; 0x28
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	10210000 	.word	0x10210000
 80018dc:	48000800 	.word	0x48000800

080018e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018e0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80018e2:	4812      	ldr	r0, [pc, #72]	; (800192c <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x2000090E;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C2_Init+0x50>)
 80018e6:	4913      	ldr	r1, [pc, #76]	; (8001934 <MX_I2C2_Init+0x54>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e8:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x2000090E;
 80018ea:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f2:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018f6:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018f8:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018fa:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018fe:	f7fe fdda 	bl	80004b6 <HAL_I2C_Init>
 8001902:	b108      	cbz	r0, 8001908 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8001904:	f000 f89a 	bl	8001a3c <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <MX_I2C2_Init+0x4c>)
 800190c:	f7fe fe24 	bl	8000558 <HAL_I2CEx_ConfigAnalogFilter>
 8001910:	b108      	cbz	r0, 8001916 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 8001912:	f000 f893 	bl	8001a3c <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001916:	2100      	movs	r1, #0
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_I2C2_Init+0x4c>)
 800191a:	f7fe fe43 	bl	80005a4 <HAL_I2CEx_ConfigDigitalFilter>
 800191e:	b118      	cbz	r0, 8001928 <MX_I2C2_Init+0x48>
  {
    Error_Handler();
  }

}
 8001920:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001924:	f000 b88a 	b.w	8001a3c <Error_Handler>
 8001928:	bd08      	pop	{r3, pc}
 800192a:	bf00      	nop
 800192c:	2000009c 	.word	0x2000009c
 8001930:	2000090e 	.word	0x2000090e
 8001934:	40005800 	.word	0x40005800

08001938 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001938:	b510      	push	{r4, lr}
 800193a:	4604      	mov	r4, r0
 800193c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	2214      	movs	r2, #20
 8001940:	2100      	movs	r1, #0
 8001942:	a803      	add	r0, sp, #12
 8001944:	f000 fa12 	bl	8001d6c <memset>
  if(i2cHandle->Instance==I2C2)
 8001948:	6822      	ldr	r2, [r4, #0]
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_I2C_MspInit+0x64>)
 800194c:	429a      	cmp	r2, r3
 800194e:	d122      	bne.n	8001996 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4c13      	ldr	r4, [pc, #76]	; (80019a0 <HAL_I2C_MspInit+0x68>)
 8001952:	6963      	ldr	r3, [r4, #20]
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	6163      	str	r3, [r4, #20]
 800195a:	6963      	ldr	r3, [r4, #20]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9b01      	ldr	r3, [sp, #4]
    /**I2C2 GPIO Configuration    
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001964:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001968:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196e:	2301      	movs	r3, #1
 8001970:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001978:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800197e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f7fe fcda 	bl	8000338 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001984:	69e3      	ldr	r3, [r4, #28]
 8001986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198a:	61e3      	str	r3, [r4, #28]
 800198c:	69e3      	ldr	r3, [r4, #28]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001996:	b008      	add	sp, #32
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	40005800 	.word	0x40005800
 80019a0:	40021000 	.word	0x40021000

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b530      	push	{r4, r5, lr}
 80019a6:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a8:	2228      	movs	r2, #40	; 0x28
 80019aa:	2100      	movs	r1, #0
 80019ac:	a805      	add	r0, sp, #20
 80019ae:	f000 f9dd 	bl	8001d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b2:	2214      	movs	r2, #20
 80019b4:	2100      	movs	r1, #0
 80019b6:	4668      	mov	r0, sp
 80019b8:	f000 f9d8 	bl	8001d6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	2234      	movs	r2, #52	; 0x34
 80019be:	2100      	movs	r1, #0
 80019c0:	a80f      	add	r0, sp, #60	; 0x3c
 80019c2:	f000 f9d3 	bl	8001d6c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c6:	2301      	movs	r3, #1
 80019c8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ca:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019cc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ce:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80019d6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d8:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019dc:	f7fe fe08 	bl	80005f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e2:	2500      	movs	r5, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e4:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ee:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f4:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f6:	f7ff f8a3 	bl	8000b40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019fa:	2340      	movs	r3, #64	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019fe:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001a00:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a02:	f7ff f977 	bl	8000cf4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001a06:	b01d      	add	sp, #116	; 0x74
 8001a08:	bd30      	pop	{r4, r5, pc}

08001a0a <main>:
{
 8001a0a:	b510      	push	{r4, lr}
	MAX6675 = MAX6675_Create();
 8001a0c:	f7ff fefe 	bl	800180c <MAX6675_Create>
 8001a10:	4604      	mov	r4, r0
  HAL_Init();
 8001a12:	f7fe fbfd 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001a16:	f7ff ffc5 	bl	80019a4 <SystemClock_Config>
  MX_GPIO_Init();
 8001a1a:	f7ff ff0f 	bl	800183c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a1e:	f000 f901 	bl	8001c24 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001a22:	f7ff ff5d 	bl	80018e0 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001a26:	f000 f80b 	bl	8001a40 <MX_SPI3_Init>
  HAL_Delay(2000);
 8001a2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a2e:	f7fe fc13 	bl	8000258 <HAL_Delay>
	  MAX6675->MAX6675_getTemp(MAX6675);
 8001a32:	4620      	mov	r0, r4
 8001a34:	6923      	ldr	r3, [r4, #16]
 8001a36:	4798      	blx	r3
	  HAL_Delay(100);
 8001a38:	2064      	movs	r0, #100	; 0x64
 8001a3a:	e7f8      	b.n	8001a2e <main+0x24>

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	4770      	bx	lr
	...

08001a40 <MX_SPI3_Init>:

/* SPI3 init function */
void MX_SPI3_Init(void)
{

  hspi3.Instance = SPI3;
 8001a40:	4811      	ldr	r0, [pc, #68]	; (8001a88 <MX_SPI3_Init+0x48>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a42:	4912      	ldr	r1, [pc, #72]	; (8001a8c <MX_SPI3_Init+0x4c>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a44:	f44f 6270 	mov.w	r2, #3840	; 0xf00
{
 8001a48:	b508      	push	{r3, lr}
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a4a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a4e:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a54:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a58:	6182      	str	r2, [r0, #24]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5a:	2300      	movs	r3, #0
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a5c:	2238      	movs	r2, #56	; 0x38
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5e:	6083      	str	r3, [r0, #8]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a60:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a62:	6143      	str	r3, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a64:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a66:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a68:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a6c:	2207      	movs	r2, #7
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a6e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a70:	2308      	movs	r3, #8
  hspi3.Init.CRCPolynomial = 7;
 8001a72:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a74:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a76:	f7ff fae8 	bl	800104a <HAL_SPI_Init>
 8001a7a:	b118      	cbz	r0, 8001a84 <MX_SPI3_Init+0x44>
  {
    Error_Handler();
  }

}
 8001a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a80:	f7ff bfdc 	b.w	8001a3c <Error_Handler>
 8001a84:	bd08      	pop	{r3, pc}
 8001a86:	bf00      	nop
 8001a88:	200000e8 	.word	0x200000e8
 8001a8c:	40003c00 	.word	0x40003c00

08001a90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	2214      	movs	r2, #20
{
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	eb0d 0002 	add.w	r0, sp, r2
 8001aa0:	f000 f964 	bl	8001d6c <memset>
  if(spiHandle->Instance==SPI3)
 8001aa4:	6822      	ldr	r2, [r4, #0]
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_SPI_MspInit+0xd4>)
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d157      	bne.n	8001b5c <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    PB4     ------> SPI3_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2402      	movs	r4, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab8:	61da      	str	r2, [r3, #28]
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001ac0:	9201      	str	r2, [sp, #4]
 8001ac2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ad2:	9202      	str	r2, [sp, #8]
 8001ad4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001adc:	615a      	str	r2, [r3, #20]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001ae4:	9203      	str	r2, [sp, #12]
 8001ae6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afa:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001afc:	2506      	movs	r5, #6
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b00:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b02:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b04:	f04f 0810 	mov.w	r8, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	a905      	add	r1, sp, #20
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b10:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b14:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f7fe fc0f 	bl	8000338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	a905      	add	r1, sp, #20
 8001b20:	4811      	ldr	r0, [pc, #68]	; (8001b68 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b22:	9305      	str	r3, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2700      	movs	r7, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b28:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b2c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f7fe fc03 	bl	8000338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	a905      	add	r1, sp, #20
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b40:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b42:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b44:	f7fe fbf8 	bl	8000338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	a905      	add	r1, sp, #20
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b4c:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b54:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b56:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f7fe fbee 	bl	8000338 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b5c:	b00a      	add	sp, #40	; 0x28
 8001b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b62:	bf00      	nop
 8001b64:	40003c00 	.word	0x40003c00
 8001b68:	48000800 	.word	0x48000800
 8001b6c:	48000400 	.word	0x48000400

08001b70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_MspInit+0x34>)
{
 8001b72:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	619a      	str	r2, [r3, #24]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	f002 0201 	and.w	r2, r2, #1
 8001b82:	9200      	str	r2, [sp, #0]
 8001b84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b8c:	61da      	str	r2, [r3, #28]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b96:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b9a:	f7fe fb71 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	b003      	add	sp, #12
 8001ba0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <NMI_Handler>:
 8001ba8:	4770      	bx	lr

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	e7fe      	b.n	8001bb0 <UsageFault_Handler>

08001bb2 <SVC_Handler>:
 8001bb2:	4770      	bx	lr

08001bb4 <DebugMon_Handler>:
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f7fe bb3c 	b.w	8000234 <HAL_IncTick>

08001bbc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4915      	ldr	r1, [pc, #84]	; (8001c14 <SystemInit+0x58>)
 8001bbe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001bc2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <SystemInit+0x5c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001bd4:	6858      	ldr	r0, [r3, #4]
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <SystemInit+0x60>)
 8001bd8:	4002      	ands	r2, r0
 8001bda:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001be2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001be6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bee:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001bf6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfa:	f022 020f 	bic.w	r2, r2, #15
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001c00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <SystemInit+0x64>)
 8001c04:	4002      	ands	r2, r0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c10:	608b      	str	r3, [r1, #8]
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	f87fc00c 	.word	0xf87fc00c
 8001c20:	ff00fccc 	.word	0xff00fccc

08001c24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c24:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001c26:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 38400;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_USART2_UART_Init+0x38>)
 8001c2a:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8001c2e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c32:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c34:	2300      	movs	r3, #0
 8001c36:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c38:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c44:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c46:	f7ff fd88 	bl	800175a <HAL_UART_Init>
 8001c4a:	b118      	cbz	r0, 8001c54 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001c50:	f7ff bef4 	b.w	8001a3c <Error_Handler>
 8001c54:	bd08      	pop	{r3, pc}
 8001c56:	bf00      	nop
 8001c58:	2000014c 	.word	0x2000014c
 8001c5c:	40004400 	.word	0x40004400

08001c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c60:	b510      	push	{r4, lr}
 8001c62:	4604      	mov	r4, r0
 8001c64:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	2214      	movs	r2, #20
 8001c68:	2100      	movs	r1, #0
 8001c6a:	a803      	add	r0, sp, #12
 8001c6c:	f000 f87e 	bl	8001d6c <memset>
  if(uartHandle->Instance==USART2)
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_UART_MspInit+0x5c>)
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d11e      	bne.n	8001cb6 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c78:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c84:	61da      	str	r2, [r3, #28]
 8001c86:	69da      	ldr	r2, [r3, #28]
 8001c88:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c8c:	9201      	str	r2, [sp, #4]
 8001c8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f7fe fb41 	bl	8000338 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cb6:	b008      	add	sp, #32
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	bf00      	nop
 8001cbc:	40004400 	.word	0x40004400

08001cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cd0:	480b      	ldr	r0, [pc, #44]	; (8001d00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <LoopForever+0x16>)
	cmp	r2, r3
 8001ce6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cea:	f7ff ff67 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f000 f811 	bl	8001d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cf2:	f7ff fe8a 	bl	8001a0a <main>

08001cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cf6:	e7fe      	b.n	8001cf6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cf8:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001cfc:	08001ed4 	.word	0x08001ed4
	ldr	r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d04:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001d08:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001d0c:	200001c0 	.word	0x200001c0

08001d10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC1_IRQHandler>
	...

08001d14 <__libc_init_array>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4e0d      	ldr	r6, [pc, #52]	; (8001d4c <__libc_init_array+0x38>)
 8001d18:	4c0d      	ldr	r4, [pc, #52]	; (8001d50 <__libc_init_array+0x3c>)
 8001d1a:	1ba4      	subs	r4, r4, r6
 8001d1c:	10a4      	asrs	r4, r4, #2
 8001d1e:	2500      	movs	r5, #0
 8001d20:	42a5      	cmp	r5, r4
 8001d22:	d109      	bne.n	8001d38 <__libc_init_array+0x24>
 8001d24:	4e0b      	ldr	r6, [pc, #44]	; (8001d54 <__libc_init_array+0x40>)
 8001d26:	4c0c      	ldr	r4, [pc, #48]	; (8001d58 <__libc_init_array+0x44>)
 8001d28:	f000 f8a6 	bl	8001e78 <_init>
 8001d2c:	1ba4      	subs	r4, r4, r6
 8001d2e:	10a4      	asrs	r4, r4, #2
 8001d30:	2500      	movs	r5, #0
 8001d32:	42a5      	cmp	r5, r4
 8001d34:	d105      	bne.n	8001d42 <__libc_init_array+0x2e>
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d3c:	4798      	blx	r3
 8001d3e:	3501      	adds	r5, #1
 8001d40:	e7ee      	b.n	8001d20 <__libc_init_array+0xc>
 8001d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d46:	4798      	blx	r3
 8001d48:	3501      	adds	r5, #1
 8001d4a:	e7f2      	b.n	8001d32 <__libc_init_array+0x1e>
 8001d4c:	08001ecc 	.word	0x08001ecc
 8001d50:	08001ecc 	.word	0x08001ecc
 8001d54:	08001ecc 	.word	0x08001ecc
 8001d58:	08001ed0 	.word	0x08001ed0

08001d5c <malloc>:
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <malloc+0xc>)
 8001d5e:	4601      	mov	r1, r0
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	f000 b80b 	b.w	8001d7c <_malloc_r>
 8001d66:	bf00      	nop
 8001d68:	2000000c 	.word	0x2000000c

08001d6c <memset>:
 8001d6c:	4402      	add	r2, r0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d100      	bne.n	8001d76 <memset+0xa>
 8001d74:	4770      	bx	lr
 8001d76:	f803 1b01 	strb.w	r1, [r3], #1
 8001d7a:	e7f9      	b.n	8001d70 <memset+0x4>

08001d7c <_malloc_r>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	1ccd      	adds	r5, r1, #3
 8001d80:	f025 0503 	bic.w	r5, r5, #3
 8001d84:	3508      	adds	r5, #8
 8001d86:	2d0c      	cmp	r5, #12
 8001d88:	bf38      	it	cc
 8001d8a:	250c      	movcc	r5, #12
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	4606      	mov	r6, r0
 8001d90:	db01      	blt.n	8001d96 <_malloc_r+0x1a>
 8001d92:	42a9      	cmp	r1, r5
 8001d94:	d903      	bls.n	8001d9e <_malloc_r+0x22>
 8001d96:	230c      	movs	r3, #12
 8001d98:	6033      	str	r3, [r6, #0]
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	f000 f85b 	bl	8001e58 <__malloc_lock>
 8001da2:	4a23      	ldr	r2, [pc, #140]	; (8001e30 <_malloc_r+0xb4>)
 8001da4:	6814      	ldr	r4, [r2, #0]
 8001da6:	4621      	mov	r1, r4
 8001da8:	b991      	cbnz	r1, 8001dd0 <_malloc_r+0x54>
 8001daa:	4c22      	ldr	r4, [pc, #136]	; (8001e34 <_malloc_r+0xb8>)
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	b91b      	cbnz	r3, 8001db8 <_malloc_r+0x3c>
 8001db0:	4630      	mov	r0, r6
 8001db2:	f000 f841 	bl	8001e38 <_sbrk_r>
 8001db6:	6020      	str	r0, [r4, #0]
 8001db8:	4629      	mov	r1, r5
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f000 f83c 	bl	8001e38 <_sbrk_r>
 8001dc0:	1c43      	adds	r3, r0, #1
 8001dc2:	d126      	bne.n	8001e12 <_malloc_r+0x96>
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	6033      	str	r3, [r6, #0]
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f000 f846 	bl	8001e5a <__malloc_unlock>
 8001dce:	e7e4      	b.n	8001d9a <_malloc_r+0x1e>
 8001dd0:	680b      	ldr	r3, [r1, #0]
 8001dd2:	1b5b      	subs	r3, r3, r5
 8001dd4:	d41a      	bmi.n	8001e0c <_malloc_r+0x90>
 8001dd6:	2b0b      	cmp	r3, #11
 8001dd8:	d90f      	bls.n	8001dfa <_malloc_r+0x7e>
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	50cd      	str	r5, [r1, r3]
 8001dde:	18cc      	adds	r4, r1, r3
 8001de0:	4630      	mov	r0, r6
 8001de2:	f000 f83a 	bl	8001e5a <__malloc_unlock>
 8001de6:	f104 000b 	add.w	r0, r4, #11
 8001dea:	1d23      	adds	r3, r4, #4
 8001dec:	f020 0007 	bic.w	r0, r0, #7
 8001df0:	1ac3      	subs	r3, r0, r3
 8001df2:	d01b      	beq.n	8001e2c <_malloc_r+0xb0>
 8001df4:	425a      	negs	r2, r3
 8001df6:	50e2      	str	r2, [r4, r3]
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	428c      	cmp	r4, r1
 8001dfc:	bf0d      	iteet	eq
 8001dfe:	6863      	ldreq	r3, [r4, #4]
 8001e00:	684b      	ldrne	r3, [r1, #4]
 8001e02:	6063      	strne	r3, [r4, #4]
 8001e04:	6013      	streq	r3, [r2, #0]
 8001e06:	bf18      	it	ne
 8001e08:	460c      	movne	r4, r1
 8001e0a:	e7e9      	b.n	8001de0 <_malloc_r+0x64>
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	6849      	ldr	r1, [r1, #4]
 8001e10:	e7ca      	b.n	8001da8 <_malloc_r+0x2c>
 8001e12:	1cc4      	adds	r4, r0, #3
 8001e14:	f024 0403 	bic.w	r4, r4, #3
 8001e18:	42a0      	cmp	r0, r4
 8001e1a:	d005      	beq.n	8001e28 <_malloc_r+0xac>
 8001e1c:	1a21      	subs	r1, r4, r0
 8001e1e:	4630      	mov	r0, r6
 8001e20:	f000 f80a 	bl	8001e38 <_sbrk_r>
 8001e24:	3001      	adds	r0, #1
 8001e26:	d0cd      	beq.n	8001dc4 <_malloc_r+0x48>
 8001e28:	6025      	str	r5, [r4, #0]
 8001e2a:	e7d9      	b.n	8001de0 <_malloc_r+0x64>
 8001e2c:	bd70      	pop	{r4, r5, r6, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000008c 	.word	0x2000008c
 8001e34:	20000090 	.word	0x20000090

08001e38 <_sbrk_r>:
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4c06      	ldr	r4, [pc, #24]	; (8001e54 <_sbrk_r+0x1c>)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4605      	mov	r5, r0
 8001e40:	4608      	mov	r0, r1
 8001e42:	6023      	str	r3, [r4, #0]
 8001e44:	f000 f80a 	bl	8001e5c <_sbrk>
 8001e48:	1c43      	adds	r3, r0, #1
 8001e4a:	d102      	bne.n	8001e52 <_sbrk_r+0x1a>
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	b103      	cbz	r3, 8001e52 <_sbrk_r+0x1a>
 8001e50:	602b      	str	r3, [r5, #0]
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
 8001e54:	200001bc 	.word	0x200001bc

08001e58 <__malloc_lock>:
 8001e58:	4770      	bx	lr

08001e5a <__malloc_unlock>:
 8001e5a:	4770      	bx	lr

08001e5c <_sbrk>:
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <_sbrk+0x14>)
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	4602      	mov	r2, r0
 8001e62:	b909      	cbnz	r1, 8001e68 <_sbrk+0xc>
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <_sbrk+0x18>)
 8001e66:	6019      	str	r1, [r3, #0]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	4402      	add	r2, r0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	4770      	bx	lr
 8001e70:	20000094 	.word	0x20000094
 8001e74:	200001c0 	.word	0x200001c0

08001e78 <_init>:
 8001e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7a:	bf00      	nop
 8001e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7e:	bc08      	pop	{r3}
 8001e80:	469e      	mov	lr, r3
 8001e82:	4770      	bx	lr

08001e84 <_fini>:
 8001e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e86:	bf00      	nop
 8001e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8a:	bc08      	pop	{r3}
 8001e8c:	469e      	mov	lr, r3
 8001e8e:	4770      	bx	lr
